//
// File generated by /home/fujigami/retro/root_build/bin/rootcint at Tue Dec 15 22:27:43 2020

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME dIhomedIfujigamidIretrodIlowedIsourcedImacrodIsrcdImacroRootDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "macroRootDict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void Eventdisplay_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_Eventdisplay(void *p = 0);
   static void *newArray_Eventdisplay(Long_t size, void *p);
   static void delete_Eventdisplay(void *p);
   static void deleteArray_Eventdisplay(void *p);
   static void destruct_Eventdisplay(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::Eventdisplay*)
   {
      ::Eventdisplay *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Eventdisplay >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Eventdisplay", ::Eventdisplay::Class_Version(), "/home/fujigami/retro/lowe/source/macro/include/eventdisplay.hh", 10,
                  typeid(::Eventdisplay), ::ROOT::DefineBehavior(ptr, ptr),
                  &::Eventdisplay::Dictionary, isa_proxy, 4,
                  sizeof(::Eventdisplay) );
      instance.SetNew(&new_Eventdisplay);
      instance.SetNewArray(&newArray_Eventdisplay);
      instance.SetDelete(&delete_Eventdisplay);
      instance.SetDeleteArray(&deleteArray_Eventdisplay);
      instance.SetDestructor(&destruct_Eventdisplay);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::Eventdisplay*)
   {
      return GenerateInitInstanceLocal((::Eventdisplay*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Eventdisplay*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void goodness_data_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_goodness_data(void *p = 0);
   static void *newArray_goodness_data(Long_t size, void *p);
   static void delete_goodness_data(void *p);
   static void deleteArray_goodness_data(void *p);
   static void destruct_goodness_data(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::goodness_data*)
   {
      ::goodness_data *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::goodness_data >(0);
      static ::ROOT::TGenericClassInfo 
         instance("goodness_data", ::goodness_data::Class_Version(), "/home/fujigami/retro/lowe/source/macro/include/goodness_data.hh", 9,
                  typeid(::goodness_data), ::ROOT::DefineBehavior(ptr, ptr),
                  &::goodness_data::Dictionary, isa_proxy, 4,
                  sizeof(::goodness_data) );
      instance.SetNew(&new_goodness_data);
      instance.SetNewArray(&newArray_goodness_data);
      instance.SetDelete(&delete_goodness_data);
      instance.SetDeleteArray(&deleteArray_goodness_data);
      instance.SetDestructor(&destruct_goodness_data);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::goodness_data*)
   {
      return GenerateInitInstanceLocal((::goodness_data*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::goodness_data*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void l_dir_data_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_l_dir_data(void *p = 0);
   static void *newArray_l_dir_data(Long_t size, void *p);
   static void delete_l_dir_data(void *p);
   static void deleteArray_l_dir_data(void *p);
   static void destruct_l_dir_data(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::l_dir_data*)
   {
      ::l_dir_data *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::l_dir_data >(0);
      static ::ROOT::TGenericClassInfo 
         instance("l_dir_data", ::l_dir_data::Class_Version(), "/home/fujigami/retro/lowe/source/macro/include/likelihood_direction_data.hh", 7,
                  typeid(::l_dir_data), ::ROOT::DefineBehavior(ptr, ptr),
                  &::l_dir_data::Dictionary, isa_proxy, 4,
                  sizeof(::l_dir_data) );
      instance.SetNew(&new_l_dir_data);
      instance.SetNewArray(&newArray_l_dir_data);
      instance.SetDelete(&delete_l_dir_data);
      instance.SetDeleteArray(&deleteArray_l_dir_data);
      instance.SetDestructor(&destruct_l_dir_data);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::l_dir_data*)
   {
      return GenerateInitInstanceLocal((::l_dir_data*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::l_dir_data*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AnalizedData_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AnalizedData(void *p = 0);
   static void *newArray_AnalizedData(Long_t size, void *p);
   static void delete_AnalizedData(void *p);
   static void deleteArray_AnalizedData(void *p);
   static void destruct_AnalizedData(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AnalizedData*)
   {
      ::AnalizedData *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AnalizedData >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AnalizedData", ::AnalizedData::Class_Version(), "/home/fujigami/retro/lowe/source/macro/include/AnalizedData.hh", 11,
                  typeid(::AnalizedData), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AnalizedData::Dictionary, isa_proxy, 4,
                  sizeof(::AnalizedData) );
      instance.SetNew(&new_AnalizedData);
      instance.SetNewArray(&newArray_AnalizedData);
      instance.SetDelete(&delete_AnalizedData);
      instance.SetDeleteArray(&deleteArray_AnalizedData);
      instance.SetDestructor(&destruct_AnalizedData);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AnalizedData*)
   {
      return GenerateInitInstanceLocal((::AnalizedData*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AnalizedData*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void C4Number_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_C4Number(void *p = 0);
   static void *newArray_C4Number(Long_t size, void *p);
   static void delete_C4Number(void *p);
   static void deleteArray_C4Number(void *p);
   static void destruct_C4Number(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::C4Number*)
   {
      ::C4Number *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::C4Number >(0);
      static ::ROOT::TGenericClassInfo 
         instance("C4Number", ::C4Number::Class_Version(), "/home/fujigami/retro/lowe/source/macro/include/C4Number.hh", 7,
                  typeid(::C4Number), ::ROOT::DefineBehavior(ptr, ptr),
                  &::C4Number::Dictionary, isa_proxy, 4,
                  sizeof(::C4Number) );
      instance.SetNew(&new_C4Number);
      instance.SetNewArray(&newArray_C4Number);
      instance.SetDelete(&delete_C4Number);
      instance.SetDeleteArray(&deleteArray_C4Number);
      instance.SetDestructor(&destruct_C4Number);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::C4Number*)
   {
      return GenerateInitInstanceLocal((::C4Number*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::C4Number*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void CSearch_range_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_CSearch_range(void *p = 0);
   static void *newArray_CSearch_range(Long_t size, void *p);
   static void delete_CSearch_range(void *p);
   static void deleteArray_CSearch_range(void *p);
   static void destruct_CSearch_range(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::CSearch_range*)
   {
      ::CSearch_range *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::CSearch_range >(0);
      static ::ROOT::TGenericClassInfo 
         instance("CSearch_range", ::CSearch_range::Class_Version(), "/home/fujigami/retro/lowe/source/macro/include/CSearch_range.hh", 12,
                  typeid(::CSearch_range), ::ROOT::DefineBehavior(ptr, ptr),
                  &::CSearch_range::Dictionary, isa_proxy, 4,
                  sizeof(::CSearch_range) );
      instance.SetNew(&new_CSearch_range);
      instance.SetNewArray(&newArray_CSearch_range);
      instance.SetDelete(&delete_CSearch_range);
      instance.SetDeleteArray(&deleteArray_CSearch_range);
      instance.SetDestructor(&destruct_CSearch_range);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::CSearch_range*)
   {
      return GenerateInitInstanceLocal((::CSearch_range*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::CSearch_range*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FileList_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FileList(void *p = 0);
   static void *newArray_FileList(Long_t size, void *p);
   static void delete_FileList(void *p);
   static void deleteArray_FileList(void *p);
   static void destruct_FileList(void *p);
   static Long64_t merge_FileList(void *obj, TCollection *coll,TFileMergeInfo *info);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FileList*)
   {
      ::FileList *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FileList >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FileList", ::FileList::Class_Version(), "/home/fujigami/retro/lowe/source/macro/include/FileList.hh", 12,
                  typeid(::FileList), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FileList::Dictionary, isa_proxy, 4,
                  sizeof(::FileList) );
      instance.SetNew(&new_FileList);
      instance.SetNewArray(&newArray_FileList);
      instance.SetDelete(&delete_FileList);
      instance.SetDeleteArray(&deleteArray_FileList);
      instance.SetDestructor(&destruct_FileList);
      instance.SetMerge(&merge_FileList);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FileList*)
   {
      return GenerateInitInstanceLocal((::FileList*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FileList*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void efficiency_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_efficiency(void *p = 0);
   static void *newArray_efficiency(Long_t size, void *p);
   static void delete_efficiency(void *p);
   static void deleteArray_efficiency(void *p);
   static void destruct_efficiency(void *p);
   static void directoryAutoAdd_efficiency(void *obj, TDirectory *dir);
   static Long64_t merge_efficiency(void *obj, TCollection *coll,TFileMergeInfo *info);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::efficiency*)
   {
      ::efficiency *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::efficiency >(0);
      static ::ROOT::TGenericClassInfo 
         instance("efficiency", ::efficiency::Class_Version(), "/home/fujigami/retro/lowe/source/macro/include/efficiency.hh", 9,
                  typeid(::efficiency), ::ROOT::DefineBehavior(ptr, ptr),
                  &::efficiency::Dictionary, isa_proxy, 4,
                  sizeof(::efficiency) );
      instance.SetNew(&new_efficiency);
      instance.SetNewArray(&newArray_efficiency);
      instance.SetDelete(&delete_efficiency);
      instance.SetDeleteArray(&deleteArray_efficiency);
      instance.SetDestructor(&destruct_efficiency);
      instance.SetDirectoryAutoAdd(&directoryAutoAdd_efficiency);
      instance.SetMerge(&merge_efficiency);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::efficiency*)
   {
      return GenerateInitInstanceLocal((::efficiency*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::efficiency*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void TH1DByTree_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TH1DByTree(void *p = 0);
   static void *newArray_TH1DByTree(Long_t size, void *p);
   static void delete_TH1DByTree(void *p);
   static void deleteArray_TH1DByTree(void *p);
   static void destruct_TH1DByTree(void *p);
   static void directoryAutoAdd_TH1DByTree(void *obj, TDirectory *dir);
   static Long64_t merge_TH1DByTree(void *obj, TCollection *coll,TFileMergeInfo *info);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::TH1DByTree*)
   {
      ::TH1DByTree *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TH1DByTree >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TH1DByTree", ::TH1DByTree::Class_Version(), "/home/fujigami/retro/lowe/source/macro/include/HistByTree.hh", 12,
                  typeid(::TH1DByTree), ::ROOT::DefineBehavior(ptr, ptr),
                  &::TH1DByTree::Dictionary, isa_proxy, 4,
                  sizeof(::TH1DByTree) );
      instance.SetNew(&new_TH1DByTree);
      instance.SetNewArray(&newArray_TH1DByTree);
      instance.SetDelete(&delete_TH1DByTree);
      instance.SetDeleteArray(&deleteArray_TH1DByTree);
      instance.SetDestructor(&destruct_TH1DByTree);
      instance.SetDirectoryAutoAdd(&directoryAutoAdd_TH1DByTree);
      instance.SetMerge(&merge_TH1DByTree);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::TH1DByTree*)
   {
      return GenerateInitInstanceLocal((::TH1DByTree*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TH1DByTree*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HistError_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HistError(void *p = 0);
   static void *newArray_HistError(Long_t size, void *p);
   static void delete_HistError(void *p);
   static void deleteArray_HistError(void *p);
   static void destruct_HistError(void *p);
   static void directoryAutoAdd_HistError(void *obj, TDirectory *dir);
   static Long64_t merge_HistError(void *obj, TCollection *coll,TFileMergeInfo *info);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HistError*)
   {
      ::HistError *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HistError >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HistError", ::HistError::Class_Version(), "/home/fujigami/retro/lowe/source/macro/include/HistError.hh", 10,
                  typeid(::HistError), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HistError::Dictionary, isa_proxy, 4,
                  sizeof(::HistError) );
      instance.SetNew(&new_HistError);
      instance.SetNewArray(&newArray_HistError);
      instance.SetDelete(&delete_HistError);
      instance.SetDeleteArray(&deleteArray_HistError);
      instance.SetDestructor(&destruct_HistError);
      instance.SetDirectoryAutoAdd(&directoryAutoAdd_HistError);
      instance.SetMerge(&merge_HistError);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HistError*)
   {
      return GenerateInitInstanceLocal((::HistError*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HistError*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HistBias_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HistBias(void *p = 0);
   static void *newArray_HistBias(Long_t size, void *p);
   static void delete_HistBias(void *p);
   static void deleteArray_HistBias(void *p);
   static void destruct_HistBias(void *p);
   static void directoryAutoAdd_HistBias(void *obj, TDirectory *dir);
   static Long64_t merge_HistBias(void *obj, TCollection *coll,TFileMergeInfo *info);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HistBias*)
   {
      ::HistBias *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HistBias >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HistBias", ::HistBias::Class_Version(), "/home/fujigami/retro/lowe/source/macro/include/HistBias.hh", 10,
                  typeid(::HistBias), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HistBias::Dictionary, isa_proxy, 4,
                  sizeof(::HistBias) );
      instance.SetNew(&new_HistBias);
      instance.SetNewArray(&newArray_HistBias);
      instance.SetDelete(&delete_HistBias);
      instance.SetDeleteArray(&deleteArray_HistBias);
      instance.SetDestructor(&destruct_HistBias);
      instance.SetDirectoryAutoAdd(&directoryAutoAdd_HistBias);
      instance.SetMerge(&merge_HistBias);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HistBias*)
   {
      return GenerateInitInstanceLocal((::HistBias*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HistBias*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MultiRunAnalizeManager_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MultiRunAnalizeManager(void *p = 0);
   static void *newArray_MultiRunAnalizeManager(Long_t size, void *p);
   static void delete_MultiRunAnalizeManager(void *p);
   static void deleteArray_MultiRunAnalizeManager(void *p);
   static void destruct_MultiRunAnalizeManager(void *p);
   static Long64_t merge_MultiRunAnalizeManager(void *obj, TCollection *coll,TFileMergeInfo *info);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MultiRunAnalizeManager*)
   {
      ::MultiRunAnalizeManager *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MultiRunAnalizeManager >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MultiRunAnalizeManager", ::MultiRunAnalizeManager::Class_Version(), "/home/fujigami/retro/lowe/source/macro/include/MultiRunAnalizeManager.hh", 12,
                  typeid(::MultiRunAnalizeManager), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MultiRunAnalizeManager::Dictionary, isa_proxy, 4,
                  sizeof(::MultiRunAnalizeManager) );
      instance.SetNew(&new_MultiRunAnalizeManager);
      instance.SetNewArray(&newArray_MultiRunAnalizeManager);
      instance.SetDelete(&delete_MultiRunAnalizeManager);
      instance.SetDeleteArray(&deleteArray_MultiRunAnalizeManager);
      instance.SetDestructor(&destruct_MultiRunAnalizeManager);
      instance.SetMerge(&merge_MultiRunAnalizeManager);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MultiRunAnalizeManager*)
   {
      return GenerateInitInstanceLocal((::MultiRunAnalizeManager*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MultiRunAnalizeManager*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void OneRunAnalizeManager_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_OneRunAnalizeManager(void *p = 0);
   static void *newArray_OneRunAnalizeManager(Long_t size, void *p);
   static void delete_OneRunAnalizeManager(void *p);
   static void deleteArray_OneRunAnalizeManager(void *p);
   static void destruct_OneRunAnalizeManager(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::OneRunAnalizeManager*)
   {
      ::OneRunAnalizeManager *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::OneRunAnalizeManager >(0);
      static ::ROOT::TGenericClassInfo 
         instance("OneRunAnalizeManager", ::OneRunAnalizeManager::Class_Version(), "/home/fujigami/retro/lowe/source/macro/include/OneRunAnalizeManager.hh", 20,
                  typeid(::OneRunAnalizeManager), ::ROOT::DefineBehavior(ptr, ptr),
                  &::OneRunAnalizeManager::Dictionary, isa_proxy, 4,
                  sizeof(::OneRunAnalizeManager) );
      instance.SetNew(&new_OneRunAnalizeManager);
      instance.SetNewArray(&newArray_OneRunAnalizeManager);
      instance.SetDelete(&delete_OneRunAnalizeManager);
      instance.SetDeleteArray(&deleteArray_OneRunAnalizeManager);
      instance.SetDestructor(&destruct_OneRunAnalizeManager);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::OneRunAnalizeManager*)
   {
      return GenerateInitInstanceLocal((::OneRunAnalizeManager*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::OneRunAnalizeManager*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void AngleRange_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AngleRange(void *p = 0);
   static void *newArray_AngleRange(Long_t size, void *p);
   static void delete_AngleRange(void *p);
   static void deleteArray_AngleRange(void *p);
   static void destruct_AngleRange(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AngleRange*)
   {
      ::AngleRange *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AngleRange >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AngleRange", ::AngleRange::Class_Version(), "/home/fujigami/retro/lowe/source/macro/include/AngleRange.hh", 8,
                  typeid(::AngleRange), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AngleRange::Dictionary, isa_proxy, 4,
                  sizeof(::AngleRange) );
      instance.SetNew(&new_AngleRange);
      instance.SetNewArray(&newArray_AngleRange);
      instance.SetDelete(&delete_AngleRange);
      instance.SetDeleteArray(&deleteArray_AngleRange);
      instance.SetDestructor(&destruct_AngleRange);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AngleRange*)
   {
      return GenerateInitInstanceLocal((::AngleRange*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AngleRange*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr Eventdisplay::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *Eventdisplay::Class_Name()
{
   return "Eventdisplay";
}

//______________________________________________________________________________
const char *Eventdisplay::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::Eventdisplay*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Eventdisplay::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::Eventdisplay*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Eventdisplay::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::Eventdisplay*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Eventdisplay::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::Eventdisplay*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr goodness_data::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *goodness_data::Class_Name()
{
   return "goodness_data";
}

//______________________________________________________________________________
const char *goodness_data::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::goodness_data*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int goodness_data::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::goodness_data*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void goodness_data::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::goodness_data*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *goodness_data::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::goodness_data*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr l_dir_data::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *l_dir_data::Class_Name()
{
   return "l_dir_data";
}

//______________________________________________________________________________
const char *l_dir_data::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::l_dir_data*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int l_dir_data::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::l_dir_data*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void l_dir_data::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::l_dir_data*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *l_dir_data::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::l_dir_data*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AnalizedData::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AnalizedData::Class_Name()
{
   return "AnalizedData";
}

//______________________________________________________________________________
const char *AnalizedData::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AnalizedData*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AnalizedData::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AnalizedData*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AnalizedData::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AnalizedData*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AnalizedData::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AnalizedData*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr C4Number::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *C4Number::Class_Name()
{
   return "C4Number";
}

//______________________________________________________________________________
const char *C4Number::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::C4Number*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int C4Number::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::C4Number*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void C4Number::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::C4Number*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *C4Number::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::C4Number*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr CSearch_range::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *CSearch_range::Class_Name()
{
   return "CSearch_range";
}

//______________________________________________________________________________
const char *CSearch_range::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::CSearch_range*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int CSearch_range::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::CSearch_range*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void CSearch_range::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::CSearch_range*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *CSearch_range::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::CSearch_range*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FileList::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FileList::Class_Name()
{
   return "FileList";
}

//______________________________________________________________________________
const char *FileList::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FileList*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FileList::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FileList*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FileList::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FileList*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FileList::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FileList*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr efficiency::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *efficiency::Class_Name()
{
   return "efficiency";
}

//______________________________________________________________________________
const char *efficiency::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::efficiency*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int efficiency::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::efficiency*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void efficiency::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::efficiency*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *efficiency::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::efficiency*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr TH1DByTree::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *TH1DByTree::Class_Name()
{
   return "TH1DByTree";
}

//______________________________________________________________________________
const char *TH1DByTree::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TH1DByTree*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TH1DByTree::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TH1DByTree*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TH1DByTree::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TH1DByTree*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TH1DByTree::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TH1DByTree*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HistError::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HistError::Class_Name()
{
   return "HistError";
}

//______________________________________________________________________________
const char *HistError::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HistError*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HistError::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HistError*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HistError::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HistError*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HistError::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HistError*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HistBias::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HistBias::Class_Name()
{
   return "HistBias";
}

//______________________________________________________________________________
const char *HistBias::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HistBias*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HistBias::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HistBias*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HistBias::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HistBias*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HistBias::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HistBias*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MultiRunAnalizeManager::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MultiRunAnalizeManager::Class_Name()
{
   return "MultiRunAnalizeManager";
}

//______________________________________________________________________________
const char *MultiRunAnalizeManager::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MultiRunAnalizeManager*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MultiRunAnalizeManager::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MultiRunAnalizeManager*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MultiRunAnalizeManager::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MultiRunAnalizeManager*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MultiRunAnalizeManager::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MultiRunAnalizeManager*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr OneRunAnalizeManager::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *OneRunAnalizeManager::Class_Name()
{
   return "OneRunAnalizeManager";
}

//______________________________________________________________________________
const char *OneRunAnalizeManager::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::OneRunAnalizeManager*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int OneRunAnalizeManager::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::OneRunAnalizeManager*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void OneRunAnalizeManager::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::OneRunAnalizeManager*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *OneRunAnalizeManager::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::OneRunAnalizeManager*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr AngleRange::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AngleRange::Class_Name()
{
   return "AngleRange";
}

//______________________________________________________________________________
const char *AngleRange::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AngleRange*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AngleRange::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AngleRange*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AngleRange::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AngleRange*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AngleRange::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AngleRange*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void Eventdisplay::Streamer(TBuffer &R__b)
{
   // Stream an object of class Eventdisplay.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Eventdisplay::Class(),this);
   } else {
      R__b.WriteClassBuffer(Eventdisplay::Class(),this);
   }
}

//______________________________________________________________________________
void Eventdisplay::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class Eventdisplay.
      TClass *R__cl = ::Eventdisplay::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hall", &hall);
      R__insp.InspectMember(hall, "hall.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hcharge", &hcharge);
      R__insp.InspectMember(hcharge, "hcharge.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "htime", &htime);
      R__insp.InspectMember(htime, "htime.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hhit", &hhit);
      R__insp.InspectMember(hhit, "hhit.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "a1", &a1);
      R__insp.InspectMember(a1, "a1.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "a2", &a2);
      R__insp.InspectMember(a2, "a2.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "p1", &p1);
      R__insp.InspectMember(p1, "p1.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "WCradius", &WCradius);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "WClength", &WClength);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_Eventdisplay(void *p) {
      return  p ? new(p) ::Eventdisplay : new ::Eventdisplay;
   }
   static void *newArray_Eventdisplay(Long_t nElements, void *p) {
      return p ? new(p) ::Eventdisplay[nElements] : new ::Eventdisplay[nElements];
   }
   // Wrapper around operator delete
   static void delete_Eventdisplay(void *p) {
      delete ((::Eventdisplay*)p);
   }
   static void deleteArray_Eventdisplay(void *p) {
      delete [] ((::Eventdisplay*)p);
   }
   static void destruct_Eventdisplay(void *p) {
      typedef ::Eventdisplay current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::Eventdisplay

//______________________________________________________________________________
void goodness_data::Streamer(TBuffer &R__b)
{
   // Stream an object of class goodness_data.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(goodness_data::Class(),this);
   } else {
      R__b.WriteClassBuffer(goodness_data::Class(),this);
   }
}

//______________________________________________________________________________
void goodness_data::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class goodness_data.
      TClass *R__cl = ::goodness_data::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vector", &vector);
      R__insp.InspectMember(vector, "vector.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "goodness", &goodness);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_goodness_data(void *p) {
      return  p ? new(p) ::goodness_data : new ::goodness_data;
   }
   static void *newArray_goodness_data(Long_t nElements, void *p) {
      return p ? new(p) ::goodness_data[nElements] : new ::goodness_data[nElements];
   }
   // Wrapper around operator delete
   static void delete_goodness_data(void *p) {
      delete ((::goodness_data*)p);
   }
   static void deleteArray_goodness_data(void *p) {
      delete [] ((::goodness_data*)p);
   }
   static void destruct_goodness_data(void *p) {
      typedef ::goodness_data current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::goodness_data

//______________________________________________________________________________
void l_dir_data::Streamer(TBuffer &R__b)
{
   // Stream an object of class l_dir_data.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(l_dir_data::Class(),this);
   } else {
      R__b.WriteClassBuffer(l_dir_data::Class(),this);
   }
}

//______________________________________________________________________________
void l_dir_data::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class l_dir_data.
      TClass *R__cl = ::l_dir_data::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "likelihood", &likelihood);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "costheta", &costheta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi", &phi);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_l_dir_data(void *p) {
      return  p ? new(p) ::l_dir_data : new ::l_dir_data;
   }
   static void *newArray_l_dir_data(Long_t nElements, void *p) {
      return p ? new(p) ::l_dir_data[nElements] : new ::l_dir_data[nElements];
   }
   // Wrapper around operator delete
   static void delete_l_dir_data(void *p) {
      delete ((::l_dir_data*)p);
   }
   static void deleteArray_l_dir_data(void *p) {
      delete [] ((::l_dir_data*)p);
   }
   static void destruct_l_dir_data(void *p) {
      typedef ::l_dir_data current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::l_dir_data

//______________________________________________________________________________
void AnalizedData::Streamer(TBuffer &R__b)
{
   // Stream an object of class AnalizedData.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AnalizedData::Class(),this);
   } else {
      R__b.WriteClassBuffer(AnalizedData::Class(),this);
   }
}

//______________________________________________________________________________
void AnalizedData::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AnalizedData.
      TClass *R__cl = ::AnalizedData::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gdatagridsearch", &gdatagridsearch);
      R__insp.InspectMember(gdatagridsearch, "gdatagridsearch.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ldatagridsearch", &ldatagridsearch);
      R__insp.InspectMember(ldatagridsearch, "ldatagridsearch.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gdataminimized", &gdataminimized);
      R__insp.InspectMember(gdataminimized, "gdataminimized.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ldataminimized", &ldataminimized);
      R__insp.InspectMember(ldataminimized, "ldataminimized.");
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AnalizedData(void *p) {
      return  p ? new(p) ::AnalizedData : new ::AnalizedData;
   }
   static void *newArray_AnalizedData(Long_t nElements, void *p) {
      return p ? new(p) ::AnalizedData[nElements] : new ::AnalizedData[nElements];
   }
   // Wrapper around operator delete
   static void delete_AnalizedData(void *p) {
      delete ((::AnalizedData*)p);
   }
   static void deleteArray_AnalizedData(void *p) {
      delete [] ((::AnalizedData*)p);
   }
   static void destruct_AnalizedData(void *p) {
      typedef ::AnalizedData current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AnalizedData

//______________________________________________________________________________
void CSearch_range::Streamer(TBuffer &R__b)
{
   // Stream an object of class CSearch_range.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(CSearch_range::Class(),this);
   } else {
      R__b.WriteClassBuffer(CSearch_range::Class(),this);
   }
}

//______________________________________________________________________________
void CSearch_range::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class CSearch_range.
      TClass *R__cl = ::CSearch_range::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "search_min", &search_min);
      R__insp.InspectMember(search_min, "search_min.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "search_width", &search_width);
      R__insp.InspectMember(search_width, "search_width.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "search_number", &search_number);
      R__insp.InspectMember(search_number, "search_number.");
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_CSearch_range(void *p) {
      return  p ? new(p) ::CSearch_range : new ::CSearch_range;
   }
   static void *newArray_CSearch_range(Long_t nElements, void *p) {
      return p ? new(p) ::CSearch_range[nElements] : new ::CSearch_range[nElements];
   }
   // Wrapper around operator delete
   static void delete_CSearch_range(void *p) {
      delete ((::CSearch_range*)p);
   }
   static void deleteArray_CSearch_range(void *p) {
      delete [] ((::CSearch_range*)p);
   }
   static void destruct_CSearch_range(void *p) {
      typedef ::CSearch_range current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::CSearch_range

//______________________________________________________________________________
void C4Number::Streamer(TBuffer &R__b)
{
   // Stream an object of class C4Number.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(C4Number::Class(),this);
   } else {
      R__b.WriteClassBuffer(C4Number::Class(),this);
   }
}

//______________________________________________________________________________
void C4Number::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class C4Number.
      TClass *R__cl = ::C4Number::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x", &x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y", &y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z", &z);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "t", &t);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_C4Number(void *p) {
      return  p ? new(p) ::C4Number : new ::C4Number;
   }
   static void *newArray_C4Number(Long_t nElements, void *p) {
      return p ? new(p) ::C4Number[nElements] : new ::C4Number[nElements];
   }
   // Wrapper around operator delete
   static void delete_C4Number(void *p) {
      delete ((::C4Number*)p);
   }
   static void deleteArray_C4Number(void *p) {
      delete [] ((::C4Number*)p);
   }
   static void destruct_C4Number(void *p) {
      typedef ::C4Number current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::C4Number

//______________________________________________________________________________
void FileList::Streamer(TBuffer &R__b)
{
   // Stream an object of class FileList.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FileList::Class(),this);
   } else {
      R__b.WriteClassBuffer(FileList::Class(),this);
   }
}

//______________________________________________________________________________
void FileList::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FileList.
      TClass *R__cl = ::FileList::IsA();
      if (R__cl || R__insp.IsA()) { }
      TClonesArray::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FileList(void *p) {
      return  p ? new(p) ::FileList : new ::FileList;
   }
   static void *newArray_FileList(Long_t nElements, void *p) {
      return p ? new(p) ::FileList[nElements] : new ::FileList[nElements];
   }
   // Wrapper around operator delete
   static void delete_FileList(void *p) {
      delete ((::FileList*)p);
   }
   static void deleteArray_FileList(void *p) {
      delete [] ((::FileList*)p);
   }
   static void destruct_FileList(void *p) {
      typedef ::FileList current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around the merge function.
   static Long64_t  merge_FileList(void *obj,TCollection *coll,TFileMergeInfo *) {
      return ((::FileList*)obj)->Merge(coll);
   }
} // end of namespace ROOTDict for class ::FileList

//______________________________________________________________________________
void efficiency::Streamer(TBuffer &R__b)
{
   // Stream an object of class efficiency.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(efficiency::Class(),this);
   } else {
      R__b.WriteClassBuffer(efficiency::Class(),this);
   }
}

//______________________________________________________________________________
void efficiency::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class efficiency.
      TClass *R__cl = ::efficiency::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "filelist", &filelist);
      R__insp.InspectMember(filelist, "filelist.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Nevent", &Nevent);
      TH1D::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_efficiency(void *p) {
      return  p ? new(p) ::efficiency : new ::efficiency;
   }
   static void *newArray_efficiency(Long_t nElements, void *p) {
      return p ? new(p) ::efficiency[nElements] : new ::efficiency[nElements];
   }
   // Wrapper around operator delete
   static void delete_efficiency(void *p) {
      delete ((::efficiency*)p);
   }
   static void deleteArray_efficiency(void *p) {
      delete [] ((::efficiency*)p);
   }
   static void destruct_efficiency(void *p) {
      typedef ::efficiency current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around the directory auto add.
   static void directoryAutoAdd_efficiency(void *p, TDirectory *dir) {
      ((::efficiency*)p)->DirectoryAutoAdd(dir);
   }
   // Wrapper around the merge function.
   static Long64_t  merge_efficiency(void *obj,TCollection *coll,TFileMergeInfo *) {
      return ((::efficiency*)obj)->Merge(coll);
   }
} // end of namespace ROOTDict for class ::efficiency

//______________________________________________________________________________
void TH1DByTree::Streamer(TBuffer &R__b)
{
   // Stream an object of class TH1DByTree.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TH1DByTree::Class(),this);
   } else {
      R__b.WriteClassBuffer(TH1DByTree::Class(),this);
   }
}

//______________________________________________________________________________
void TH1DByTree::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TH1DByTree.
      TClass *R__cl = ::TH1DByTree::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fgaussian", &fgaussian);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Nevent", &Nevent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "central", &central);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "axis", &axis);
      TH1D::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_TH1DByTree(void *p) {
      return  p ? new(p) ::TH1DByTree : new ::TH1DByTree;
   }
   static void *newArray_TH1DByTree(Long_t nElements, void *p) {
      return p ? new(p) ::TH1DByTree[nElements] : new ::TH1DByTree[nElements];
   }
   // Wrapper around operator delete
   static void delete_TH1DByTree(void *p) {
      delete ((::TH1DByTree*)p);
   }
   static void deleteArray_TH1DByTree(void *p) {
      delete [] ((::TH1DByTree*)p);
   }
   static void destruct_TH1DByTree(void *p) {
      typedef ::TH1DByTree current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around the directory auto add.
   static void directoryAutoAdd_TH1DByTree(void *p, TDirectory *dir) {
      ((::TH1DByTree*)p)->DirectoryAutoAdd(dir);
   }
   // Wrapper around the merge function.
   static Long64_t  merge_TH1DByTree(void *obj,TCollection *coll,TFileMergeInfo *) {
      return ((::TH1DByTree*)obj)->Merge(coll);
   }
} // end of namespace ROOTDict for class ::TH1DByTree

//______________________________________________________________________________
void HistError::Streamer(TBuffer &R__b)
{
   // Stream an object of class HistError.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(HistError::Class(),this);
   } else {
      R__b.WriteClassBuffer(HistError::Class(),this);
   }
}

//______________________________________________________________________________
void HistError::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HistError.
      TClass *R__cl = ::HistError::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "filelist", &filelist);
      R__insp.InspectMember(filelist, "filelist.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*paraname", &paraname);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numorig", &numorig);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "minorig", &minorig);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxorig", &maxorig);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "widthorig", &widthorig);
      TH1D::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HistError(void *p) {
      return  p ? new(p) ::HistError : new ::HistError;
   }
   static void *newArray_HistError(Long_t nElements, void *p) {
      return p ? new(p) ::HistError[nElements] : new ::HistError[nElements];
   }
   // Wrapper around operator delete
   static void delete_HistError(void *p) {
      delete ((::HistError*)p);
   }
   static void deleteArray_HistError(void *p) {
      delete [] ((::HistError*)p);
   }
   static void destruct_HistError(void *p) {
      typedef ::HistError current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around the directory auto add.
   static void directoryAutoAdd_HistError(void *p, TDirectory *dir) {
      ((::HistError*)p)->DirectoryAutoAdd(dir);
   }
   // Wrapper around the merge function.
   static Long64_t  merge_HistError(void *obj,TCollection *coll,TFileMergeInfo *) {
      return ((::HistError*)obj)->Merge(coll);
   }
} // end of namespace ROOTDict for class ::HistError

//______________________________________________________________________________
void HistBias::Streamer(TBuffer &R__b)
{
   // Stream an object of class HistBias.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(HistBias::Class(),this);
   } else {
      R__b.WriteClassBuffer(HistBias::Class(),this);
   }
}

//______________________________________________________________________________
void HistBias::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HistBias.
      TClass *R__cl = ::HistBias::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "filelist", &filelist);
      R__insp.InspectMember(filelist, "filelist.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*paraname", &paraname);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numorig", &numorig);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "minorig", &minorig);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxorig", &maxorig);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "widthorig", &widthorig);
      TH1D::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HistBias(void *p) {
      return  p ? new(p) ::HistBias : new ::HistBias;
   }
   static void *newArray_HistBias(Long_t nElements, void *p) {
      return p ? new(p) ::HistBias[nElements] : new ::HistBias[nElements];
   }
   // Wrapper around operator delete
   static void delete_HistBias(void *p) {
      delete ((::HistBias*)p);
   }
   static void deleteArray_HistBias(void *p) {
      delete [] ((::HistBias*)p);
   }
   static void destruct_HistBias(void *p) {
      typedef ::HistBias current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around the directory auto add.
   static void directoryAutoAdd_HistBias(void *p, TDirectory *dir) {
      ((::HistBias*)p)->DirectoryAutoAdd(dir);
   }
   // Wrapper around the merge function.
   static Long64_t  merge_HistBias(void *obj,TCollection *coll,TFileMergeInfo *) {
      return ((::HistBias*)obj)->Merge(coll);
   }
} // end of namespace ROOTDict for class ::HistBias

//______________________________________________________________________________
void OneRunAnalizeManager::Streamer(TBuffer &R__b)
{
   // Stream an object of class OneRunAnalizeManager.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(OneRunAnalizeManager::Class(),this);
   } else {
      R__b.WriteClassBuffer(OneRunAnalizeManager::Class(),this);
   }
}

//______________________________________________________________________________
void OneRunAnalizeManager::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class OneRunAnalizeManager.
      TClass *R__cl = ::OneRunAnalizeManager::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*dfile", &dfile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*gfile", &gfile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*wcsimT", &wcsimT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*wcsimGeoT", &wcsimGeoT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*goodnessT", &goodnessT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*optionT", &optionT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*gdata", &gdata);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*range", &range);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*wcsimrootevent", &wcsimrootevent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*wcsimrootgeom", &wcsimrootgeom);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*xhist", &xhist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*yhist", &yhist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*zhist", &zhist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*thist", &thist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fgaussianx", &fgaussianx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fgaussiany", &fgaussiany);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fgaussianz", &fgaussianz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*th2d", &th2d);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nevent", &nevent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "s_fgaussianx", (void*)&s_fgaussianx);
      R__insp.InspectMember("string", (void*)&s_fgaussianx, "s_fgaussianx.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "s_fgaussiany", (void*)&s_fgaussiany);
      R__insp.InspectMember("string", (void*)&s_fgaussiany, "s_fgaussiany.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "s_fgaussianz", (void*)&s_fgaussianz);
      R__insp.InspectMember("string", (void*)&s_fgaussianz, "s_fgaussianz.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vncherenkovdigihits", (void*)&vncherenkovdigihits);
      R__insp.InspectMember("vector<int>", (void*)&vncherenkovdigihits, "vncherenkovdigihits.", false);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_OneRunAnalizeManager(void *p) {
      return  p ? new(p) ::OneRunAnalizeManager : new ::OneRunAnalizeManager;
   }
   static void *newArray_OneRunAnalizeManager(Long_t nElements, void *p) {
      return p ? new(p) ::OneRunAnalizeManager[nElements] : new ::OneRunAnalizeManager[nElements];
   }
   // Wrapper around operator delete
   static void delete_OneRunAnalizeManager(void *p) {
      delete ((::OneRunAnalizeManager*)p);
   }
   static void deleteArray_OneRunAnalizeManager(void *p) {
      delete [] ((::OneRunAnalizeManager*)p);
   }
   static void destruct_OneRunAnalizeManager(void *p) {
      typedef ::OneRunAnalizeManager current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::OneRunAnalizeManager

//______________________________________________________________________________
void MultiRunAnalizeManager::Streamer(TBuffer &R__b)
{
   // Stream an object of class MultiRunAnalizeManager.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MultiRunAnalizeManager::Class(),this);
   } else {
      R__b.WriteClassBuffer(MultiRunAnalizeManager::Class(),this);
   }
}

//______________________________________________________________________________
void MultiRunAnalizeManager::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MultiRunAnalizeManager.
      TClass *R__cl = ::MultiRunAnalizeManager::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "NRun", &NRun);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*efficiency", &efficiency);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*xerror", &xerror);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*yerror", &yerror);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*zerror", &zerror);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*xbias", &xbias);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*ybias", &ybias);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*zbias", &zbias);
      TClonesArray::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MultiRunAnalizeManager(void *p) {
      return  p ? new(p) ::MultiRunAnalizeManager : new ::MultiRunAnalizeManager;
   }
   static void *newArray_MultiRunAnalizeManager(Long_t nElements, void *p) {
      return p ? new(p) ::MultiRunAnalizeManager[nElements] : new ::MultiRunAnalizeManager[nElements];
   }
   // Wrapper around operator delete
   static void delete_MultiRunAnalizeManager(void *p) {
      delete ((::MultiRunAnalizeManager*)p);
   }
   static void deleteArray_MultiRunAnalizeManager(void *p) {
      delete [] ((::MultiRunAnalizeManager*)p);
   }
   static void destruct_MultiRunAnalizeManager(void *p) {
      typedef ::MultiRunAnalizeManager current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around the merge function.
   static Long64_t  merge_MultiRunAnalizeManager(void *obj,TCollection *coll,TFileMergeInfo *) {
      return ((::MultiRunAnalizeManager*)obj)->Merge(coll);
   }
} // end of namespace ROOTDict for class ::MultiRunAnalizeManager

//______________________________________________________________________________
void AngleRange::Streamer(TBuffer &R__b)
{
   // Stream an object of class AngleRange.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AngleRange::Class(),this);
   } else {
      R__b.WriteClassBuffer(AngleRange::Class(),this);
   }
}

//______________________________________________________________________________
void AngleRange::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AngleRange.
      TClass *R__cl = ::AngleRange::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "costhetamin", &costhetamin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "costhetawidth", &costhetawidth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "costhetanum", &costhetanum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phimin", &phimin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phiwidth", &phiwidth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phinum", &phinum);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AngleRange(void *p) {
      return  p ? new(p) ::AngleRange : new ::AngleRange;
   }
   static void *newArray_AngleRange(Long_t nElements, void *p) {
      return p ? new(p) ::AngleRange[nElements] : new ::AngleRange[nElements];
   }
   // Wrapper around operator delete
   static void delete_AngleRange(void *p) {
      delete ((::AngleRange*)p);
   }
   static void deleteArray_AngleRange(void *p) {
      delete [] ((::AngleRange*)p);
   }
   static void destruct_AngleRange(void *p) {
      typedef ::AngleRange current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AngleRange

namespace ROOTDict {
   void vectorlEintgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEintgR_Dictionary();
   static void *new_vectorlEintgR(void *p = 0);
   static void *newArray_vectorlEintgR(Long_t size, void *p);
   static void delete_vectorlEintgR(void *p);
   static void deleteArray_vectorlEintgR(void *p);
   static void destruct_vectorlEintgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<int>*)
   {
      vector<int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<int>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<int>", -2, "prec_stl/vector", 49,
                  typeid(vector<int>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEintgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<int>) );
      instance.SetNew(&new_vectorlEintgR);
      instance.SetNewArray(&newArray_vectorlEintgR);
      instance.SetDelete(&delete_vectorlEintgR);
      instance.SetDeleteArray(&deleteArray_vectorlEintgR);
      instance.SetDestructor(&destruct_vectorlEintgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<int> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEintgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<int>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEintgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int> : new vector<int>;
   }
   static void *newArray_vectorlEintgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int>[nElements] : new vector<int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEintgR(void *p) {
      delete ((vector<int>*)p);
   }
   static void deleteArray_vectorlEintgR(void *p) {
      delete [] ((vector<int>*)p);
   }
   static void destruct_vectorlEintgR(void *p) {
      typedef vector<int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<int>

/********************************************************
* /home/fujigami/retro/lowe/source/macro/src/macroRootDict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtablemacroRootDict();

extern "C" void G__set_cpp_environmentmacroRootDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("/home/fujigami/retro/lowe/source/macro/include/eventdisplay.hh");
  G__add_compiledheader("/home/fujigami/retro/lowe/source/macro/include/goodness_data.hh");
  G__add_compiledheader("/home/fujigami/retro/lowe/source/macro/include/likelihood_direction_data.hh");
  G__add_compiledheader("/home/fujigami/retro/lowe/source/macro/include/AnalizedData.hh");
  G__add_compiledheader("/home/fujigami/retro/lowe/source/macro/include/CSearch_range.hh");
  G__add_compiledheader("/home/fujigami/retro/lowe/source/macro/include/C4Number.hh");
  G__add_compiledheader("/home/fujigami/retro/lowe/source/macro/include/FileList.hh");
  G__add_compiledheader("/home/fujigami/retro/lowe/source/macro/include/efficiency.hh");
  G__add_compiledheader("/home/fujigami/retro/lowe/source/macro/include/HistByTree.hh");
  G__add_compiledheader("/home/fujigami/retro/lowe/source/macro/include/HistError.hh");
  G__add_compiledheader("/home/fujigami/retro/lowe/source/macro/include/HistBias.hh");
  G__add_compiledheader("/home/fujigami/retro/lowe/source/macro/include/MultiRunAnalizeManager.hh");
  G__add_compiledheader("/home/fujigami/retro/lowe/source/macro/include/OneRunAnalizeManager.hh");
  G__add_compiledheader("/home/fujigami/retro/lowe/source/macro/include/AngleRange.hh");
  G__cpp_reset_tagtablemacroRootDict();
}
#include <new>
extern "C" int G__cpp_dllrevmacroRootDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* Eventdisplay */
static int G__macroRootDict_193_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Eventdisplay* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Eventdisplay[n];
     } else {
       p = new((void*) gvp) Eventdisplay[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Eventdisplay;
     } else {
       p = new((void*) gvp) Eventdisplay;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__macroRootDictLN_Eventdisplay));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_193_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Eventdisplay* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new Eventdisplay((char*) G__int(libp->para[0]), (char*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) Eventdisplay((char*) G__int(libp->para[0]), (char*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__macroRootDictLN_Eventdisplay));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_193_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Eventdisplay* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Eventdisplay(
(const char*) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (char*) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (int) G__int(libp->para[5]));
     } else {
       p = new((void*) gvp) Eventdisplay(
(const char*) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (char*) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (int) G__int(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Eventdisplay(
(const char*) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (char*) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) Eventdisplay(
(const char*) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (char*) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Eventdisplay(
(const char*) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (char*) G__int(libp->para[2]), (int) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) Eventdisplay(
(const char*) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (char*) G__int(libp->para[2]), (int) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Eventdisplay(
(const char*) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) Eventdisplay(
(const char*) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (char*) G__int(libp->para[2]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__macroRootDictLN_Eventdisplay));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_193_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((Eventdisplay*) G__getstructoffset())->Set((const char*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((Eventdisplay*) G__getstructoffset())->Set((const char*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((Eventdisplay*) G__getstructoffset())->Set((const char*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((Eventdisplay*) G__getstructoffset())->Set((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_193_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((Eventdisplay*) G__getstructoffset())->Drawall((Option_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((Eventdisplay*) G__getstructoffset())->Drawall();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_193_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((Eventdisplay*) G__getstructoffset())->Drawcharge((Option_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((Eventdisplay*) G__getstructoffset())->Drawcharge();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_193_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((Eventdisplay*) G__getstructoffset())->Drawtime((Option_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((Eventdisplay*) G__getstructoffset())->Drawtime();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_193_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((Eventdisplay*) G__getstructoffset())->Drawhit((Option_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((Eventdisplay*) G__getstructoffset())->Drawhit();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_193_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((Eventdisplay*) G__getstructoffset())->Gethall());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_193_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((Eventdisplay*) G__getstructoffset())->Gethcharge());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_193_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((Eventdisplay*) G__getstructoffset())->Gethtime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_193_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((Eventdisplay*) G__getstructoffset())->Gethhit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_193_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 103, (long) ((Eventdisplay*) G__getstructoffset())->Add((Eventdisplay*) G__int(libp->para[0]), (Eventdisplay*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((Eventdisplay*) G__getstructoffset())->Add((Eventdisplay*) G__int(libp->para[0]), (Eventdisplay*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((Eventdisplay*) G__getstructoffset())->Add((Eventdisplay*) G__int(libp->para[0]), (Eventdisplay*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_193_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((Eventdisplay*) G__getstructoffset())->Add((Eventdisplay*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((Eventdisplay*) G__getstructoffset())->Add((Eventdisplay*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_193_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((Eventdisplay*) G__getstructoffset())->GetWCradius());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_193_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((Eventdisplay*) G__getstructoffset())->GetWClength());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_193_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letint(result7, 85, (long) Eventdisplay::Sum((const char*) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (char*) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (int) G__int(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 85, (long) Eventdisplay::Sum((const char*) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (char*) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 85, (long) Eventdisplay::Sum((const char*) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (char*) G__int(libp->para[2]), (int) G__int(libp->para[3])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_193_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Eventdisplay::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_193_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Eventdisplay::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_193_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Eventdisplay::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_193_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Eventdisplay::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_193_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Eventdisplay*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_193_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Eventdisplay::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_193_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Eventdisplay::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_193_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Eventdisplay::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_193_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Eventdisplay::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__macroRootDict_193_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Eventdisplay* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Eventdisplay(*(Eventdisplay*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__macroRootDictLN_Eventdisplay));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Eventdisplay G__TEventdisplay;
static int G__macroRootDict_193_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Eventdisplay*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Eventdisplay*) (soff+(sizeof(Eventdisplay)*i)))->~G__TEventdisplay();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Eventdisplay*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Eventdisplay*) (soff))->~G__TEventdisplay();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* goodness_data */
static int G__macroRootDict_232_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   goodness_data* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new goodness_data(*((TLorentzVector*) G__int(libp->para[0])), (double) G__double(libp->para[1]));
     } else {
       p = new((void*) gvp) goodness_data(*((TLorentzVector*) G__int(libp->para[0])), (double) G__double(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new goodness_data(*((TLorentzVector*) G__int(libp->para[0])));
     } else {
       p = new((void*) gvp) goodness_data(*((TLorentzVector*) G__int(libp->para[0])));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__macroRootDictLN_goodness_data));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_232_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   goodness_data* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new goodness_data[n];
     } else {
       p = new((void*) gvp) goodness_data[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new goodness_data;
     } else {
       p = new((void*) gvp) goodness_data;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__macroRootDictLN_goodness_data));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_232_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const goodness_data*) G__getstructoffset())->GetT());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_232_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const goodness_data*) G__getstructoffset())->GetX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_232_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const goodness_data*) G__getstructoffset())->GetY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_232_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const goodness_data*) G__getstructoffset())->GetZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_232_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector3* pobj;
         const TVector3 xobj = ((const goodness_data*) G__getstructoffset())->GetPosition();
         pobj = new TVector3(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_232_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TLorentzVector* pobj;
         const TLorentzVector xobj = ((const goodness_data*) G__getstructoffset())->Get4Vector();
         pobj = new TLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_232_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const goodness_data*) G__getstructoffset())->Getgoodness());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_232_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((goodness_data*) G__getstructoffset())->Set4Vector(*((TLorentzVector*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_232_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((goodness_data*) G__getstructoffset())->Setgoodness((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_232_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((goodness_data*) G__getstructoffset())->Setdata(*((goodness_data*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_232_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) goodness_data::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_232_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) goodness_data::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_232_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) goodness_data::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_232_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      goodness_data::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_232_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((goodness_data*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_232_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) goodness_data::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_232_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) goodness_data::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_232_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) goodness_data::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_232_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) goodness_data::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__macroRootDict_232_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   goodness_data* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new goodness_data(*(goodness_data*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__macroRootDictLN_goodness_data));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef goodness_data G__Tgoodness_data;
static int G__macroRootDict_232_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (goodness_data*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((goodness_data*) (soff+(sizeof(goodness_data)*i)))->~G__Tgoodness_data();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (goodness_data*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((goodness_data*) (soff))->~G__Tgoodness_data();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__macroRootDict_232_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   goodness_data* dest = (goodness_data*) G__getstructoffset();
   *dest = *(goodness_data*) libp->para[0].ref;
   const goodness_data& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* l_dir_data */
static int G__macroRootDict_233_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   l_dir_data* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new l_dir_data[n];
     } else {
       p = new((void*) gvp) l_dir_data[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new l_dir_data;
     } else {
       p = new((void*) gvp) l_dir_data;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__macroRootDictLN_l_dir_data));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_233_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   l_dir_data* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new l_dir_data(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
   } else {
     p = new((void*) gvp) l_dir_data(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__macroRootDictLN_l_dir_data));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_233_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((l_dir_data*) G__getstructoffset())->Setdata(*((l_dir_data*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_233_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((l_dir_data*) G__getstructoffset())->SetL((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_233_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((l_dir_data*) G__getstructoffset())->SetCosTheta((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_233_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((l_dir_data*) G__getstructoffset())->SetPhi((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_233_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((l_dir_data*) G__getstructoffset())->GetL());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_233_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((l_dir_data*) G__getstructoffset())->GetCosTheta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_233_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((l_dir_data*) G__getstructoffset())->GetPhi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_233_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) l_dir_data::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_233_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) l_dir_data::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_233_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) l_dir_data::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_233_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      l_dir_data::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_233_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((l_dir_data*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_233_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) l_dir_data::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_233_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) l_dir_data::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_233_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) l_dir_data::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_233_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) l_dir_data::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__macroRootDict_233_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   l_dir_data* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new l_dir_data(*(l_dir_data*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__macroRootDictLN_l_dir_data));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef l_dir_data G__Tl_dir_data;
static int G__macroRootDict_233_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (l_dir_data*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((l_dir_data*) (soff+(sizeof(l_dir_data)*i)))->~G__Tl_dir_data();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (l_dir_data*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((l_dir_data*) (soff))->~G__Tl_dir_data();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__macroRootDict_233_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   l_dir_data* dest = (l_dir_data*) G__getstructoffset();
   *dest = *(l_dir_data*) libp->para[0].ref;
   const l_dir_data& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AnalizedData */
static int G__macroRootDict_234_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AnalizedData* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AnalizedData[n];
     } else {
       p = new((void*) gvp) AnalizedData[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AnalizedData;
     } else {
       p = new((void*) gvp) AnalizedData;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__macroRootDictLN_AnalizedData));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_234_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AnalizedData* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AnalizedData(
*((goodness_data*) G__int(libp->para[0])), *((l_dir_data*) G__int(libp->para[1]))
, *((goodness_data*) G__int(libp->para[2])), *((l_dir_data*) G__int(libp->para[3])));
   } else {
     p = new((void*) gvp) AnalizedData(
*((goodness_data*) G__int(libp->para[0])), *((l_dir_data*) G__int(libp->para[1]))
, *((goodness_data*) G__int(libp->para[2])), *((l_dir_data*) G__int(libp->para[3])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__macroRootDictLN_AnalizedData));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_234_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         goodness_data* pobj;
         goodness_data xobj = ((AnalizedData*) G__getstructoffset())->Getgdatagridsearch();
         pobj = new goodness_data(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_234_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         l_dir_data* pobj;
         l_dir_data xobj = ((AnalizedData*) G__getstructoffset())->Getldatagridsearch();
         pobj = new l_dir_data(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_234_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         goodness_data* pobj;
         goodness_data xobj = ((AnalizedData*) G__getstructoffset())->Getdataminimized();
         pobj = new goodness_data(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_234_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         l_dir_data* pobj;
         l_dir_data xobj = ((AnalizedData*) G__getstructoffset())->Getldataminimized();
         pobj = new l_dir_data(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_234_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AnalizedData*) G__getstructoffset())->Setgdatagridsearch(*((goodness_data*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_234_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AnalizedData*) G__getstructoffset())->Setldatagridsearch(*((l_dir_data*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_234_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AnalizedData*) G__getstructoffset())->Setgdataminimized(*((goodness_data*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_234_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AnalizedData*) G__getstructoffset())->Setldataminimized(*((l_dir_data*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_234_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AnalizedData::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_234_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AnalizedData::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_234_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AnalizedData::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_234_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AnalizedData::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_234_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AnalizedData*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_234_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AnalizedData::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_234_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AnalizedData::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_234_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AnalizedData::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_234_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AnalizedData::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__macroRootDict_234_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   AnalizedData* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new AnalizedData(*(AnalizedData*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__macroRootDictLN_AnalizedData));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AnalizedData G__TAnalizedData;
static int G__macroRootDict_234_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AnalizedData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AnalizedData*) (soff+(sizeof(AnalizedData)*i)))->~G__TAnalizedData();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AnalizedData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AnalizedData*) (soff))->~G__TAnalizedData();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__macroRootDict_234_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AnalizedData* dest = (AnalizedData*) G__getstructoffset();
   *dest = *(AnalizedData*) libp->para[0].ref;
   const AnalizedData& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* C4Number */
static int G__macroRootDict_235_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   C4Number* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new C4Number(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3]));
   } else {
     p = new((void*) gvp) C4Number(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__macroRootDictLN_C4Number));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_235_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   C4Number* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new C4Number[n];
     } else {
       p = new((void*) gvp) C4Number[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new C4Number;
     } else {
       p = new((void*) gvp) C4Number;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__macroRootDictLN_C4Number));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_235_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const C4Number*) G__getstructoffset())->GetX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_235_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const C4Number*) G__getstructoffset())->GetY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_235_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const C4Number*) G__getstructoffset())->GetZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_235_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const C4Number*) G__getstructoffset())->GetT());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_235_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((C4Number*) G__getstructoffset())->SetX((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_235_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((C4Number*) G__getstructoffset())->SetY((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_235_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((C4Number*) G__getstructoffset())->SetZ((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_235_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((C4Number*) G__getstructoffset())->SetT((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_235_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((C4Number*) G__getstructoffset())->Printnumber();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_235_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const C4Number* pobj;
         const C4Number xobj = ((const C4Number*) G__getstructoffset())->operator+(*(C4Number*) libp->para[0].ref);
         pobj = new C4Number(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_235_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const C4Number* pobj;
         const C4Number xobj = ((const C4Number*) G__getstructoffset())->operator-(*(C4Number*) libp->para[0].ref);
         pobj = new C4Number(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_235_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const C4Number*) G__getstructoffset())->operator==(*(C4Number*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_235_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const C4Number*) G__getstructoffset())->operator!=(*(C4Number*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_235_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const C4Number*) G__getstructoffset())->operator*(*(C4Number*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_235_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) C4Number::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_235_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) C4Number::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_235_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) C4Number::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_235_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      C4Number::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_235_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((C4Number*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_235_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) C4Number::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_235_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) C4Number::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_235_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) C4Number::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_235_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) C4Number::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__macroRootDict_235_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   C4Number* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new C4Number(*(C4Number*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__macroRootDictLN_C4Number));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef C4Number G__TC4Number;
static int G__macroRootDict_235_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (C4Number*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((C4Number*) (soff+(sizeof(C4Number)*i)))->~G__TC4Number();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (C4Number*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((C4Number*) (soff))->~G__TC4Number();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__macroRootDict_235_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   C4Number* dest = (C4Number*) G__getstructoffset();
   *dest = *(C4Number*) libp->para[0].ref;
   const C4Number& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* CSearch_range */
static int G__macroRootDict_236_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CSearch_range* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CSearch_range(
*((TLorentzVector*) G__int(libp->para[0])), *((TLorentzVector*) G__int(libp->para[1]))
, *((C4Number*) G__int(libp->para[2])));
   } else {
     p = new((void*) gvp) CSearch_range(
*((TLorentzVector*) G__int(libp->para[0])), *((TLorentzVector*) G__int(libp->para[1]))
, *((C4Number*) G__int(libp->para[2])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__macroRootDictLN_CSearch_range));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_236_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CSearch_range* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CSearch_range[n];
     } else {
       p = new((void*) gvp) CSearch_range[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CSearch_range;
     } else {
       p = new((void*) gvp) CSearch_range;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__macroRootDictLN_CSearch_range));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_236_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CSearch_range*) G__getstructoffset())->Setrange(*((CSearch_range*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_236_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const CSearch_range*) G__getstructoffset())->GetN());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_236_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CSearch_range*) G__getstructoffset())->GetXmin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_236_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CSearch_range*) G__getstructoffset())->GetYmin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_236_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CSearch_range*) G__getstructoffset())->GetZmin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_236_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CSearch_range*) G__getstructoffset())->GetTmin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_236_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CSearch_range*) G__getstructoffset())->GetXwidth());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_236_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CSearch_range*) G__getstructoffset())->GetYwidth());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_236_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CSearch_range*) G__getstructoffset())->GetZwidth());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_236_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CSearch_range*) G__getstructoffset())->GetTwidth());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_236_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const CSearch_range*) G__getstructoffset())->GetXNum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_236_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const CSearch_range*) G__getstructoffset())->GetYNum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_236_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const CSearch_range*) G__getstructoffset())->GetZNum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_236_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const CSearch_range*) G__getstructoffset())->GetTNum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_236_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CSearch_range*) G__getstructoffset())->GetXmax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_236_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CSearch_range*) G__getstructoffset())->GetYmax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_236_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CSearch_range*) G__getstructoffset())->GetZmax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_236_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CSearch_range*) G__getstructoffset())->GetTmax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_236_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CSearch_range*) G__getstructoffset())->GetXcentral());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_236_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CSearch_range*) G__getstructoffset())->GetYcentral());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_236_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CSearch_range*) G__getstructoffset())->GetZcentral());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_236_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CSearch_range*) G__getstructoffset())->GetTcentral());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_236_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CSearch_range*) G__getstructoffset())->GetXallwidth());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_236_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CSearch_range*) G__getstructoffset())->GetYallwidth());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_236_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CSearch_range*) G__getstructoffset())->GetZallwidth());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_236_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CSearch_range*) G__getstructoffset())->GetTallwidth());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_236_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CSearch_range*) G__getstructoffset())->Setmin(*((TLorentzVector*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_236_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CSearch_range*) G__getstructoffset())->Setwidth(*((TLorentzVector*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_236_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CSearch_range*) G__getstructoffset())->SetNum(*((C4Number*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_236_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TLorentzVector* pobj;
         TLorentzVector xobj = ((CSearch_range*) G__getstructoffset())->Getmin();
         pobj = new TLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_236_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TLorentzVector* pobj;
         TLorentzVector xobj = ((CSearch_range*) G__getstructoffset())->Getwidth();
         pobj = new TLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_236_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         C4Number* pobj;
         C4Number xobj = ((CSearch_range*) G__getstructoffset())->GetNum();
         pobj = new C4Number(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_236_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CSearch_range*) G__getstructoffset())->Printrange();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_236_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) CSearch_range::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_236_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) CSearch_range::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_236_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) CSearch_range::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_236_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      CSearch_range::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_236_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CSearch_range*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_236_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) CSearch_range::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_236_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) CSearch_range::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_236_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) CSearch_range::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_236_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) CSearch_range::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__macroRootDict_236_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   CSearch_range* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new CSearch_range(*(CSearch_range*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__macroRootDictLN_CSearch_range));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef CSearch_range G__TCSearch_range;
static int G__macroRootDict_236_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (CSearch_range*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((CSearch_range*) (soff+(sizeof(CSearch_range)*i)))->~G__TCSearch_range();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (CSearch_range*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((CSearch_range*) (soff))->~G__TCSearch_range();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__macroRootDict_236_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CSearch_range* dest = (CSearch_range*) G__getstructoffset();
   *dest = *(CSearch_range*) libp->para[0].ref;
   const CSearch_range& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FileList */
static int G__macroRootDict_245_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FileList* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FileList[n];
     } else {
       p = new((void*) gvp) FileList[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FileList;
     } else {
       p = new((void*) gvp) FileList;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__macroRootDictLN_FileList));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_245_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FileList* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FileList((const char*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) FileList((const char*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FileList((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) FileList((const char*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__macroRootDictLN_FileList));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_245_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FileList::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_245_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FileList::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_245_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FileList::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_245_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FileList::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_245_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FileList*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_245_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FileList::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_245_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FileList::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_245_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FileList::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_245_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FileList::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FileList G__TFileList;
static int G__macroRootDict_245_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FileList*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FileList*) (soff+(sizeof(FileList)*i)))->~G__TFileList();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FileList*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FileList*) (soff))->~G__TFileList();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* efficiency */
static int G__macroRootDict_246_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   efficiency* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new efficiency[n];
     } else {
       p = new((void*) gvp) efficiency[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new efficiency;
     } else {
       p = new((void*) gvp) efficiency;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__macroRootDictLN_efficiency));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_246_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   efficiency* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 7
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new efficiency(
(FileList*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (double) G__double(libp->para[4]), (double) G__double(libp->para[5])
, (double) G__double(libp->para[6]));
   } else {
     p = new((void*) gvp) efficiency(
(FileList*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (double) G__double(libp->para[4]), (double) G__double(libp->para[5])
, (double) G__double(libp->para[6]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__macroRootDictLN_efficiency));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_246_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((efficiency*) G__getstructoffset())->SetEfError();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_246_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) efficiency::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_246_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) efficiency::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_246_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) efficiency::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_246_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      efficiency::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_246_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((efficiency*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_246_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) efficiency::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_246_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) efficiency::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_246_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) efficiency::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_246_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) efficiency::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef efficiency G__Tefficiency;
static int G__macroRootDict_246_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (efficiency*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((efficiency*) (soff+(sizeof(efficiency)*i)))->~G__Tefficiency();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (efficiency*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((efficiency*) (soff))->~G__Tefficiency();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TH1DByTree */
static int G__macroRootDict_324_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TH1DByTree* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TH1DByTree[n];
     } else {
       p = new((void*) gvp) TH1DByTree[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TH1DByTree;
     } else {
       p = new((void*) gvp) TH1DByTree;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__macroRootDictLN_TH1DByTree));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_324_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TH1DByTree* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 9:
     //m: 9
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TH1DByTree(
(TTree*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (double) G__double(libp->para[5])
, (double) G__double(libp->para[6]), (double) G__double(libp->para[7])
, (TH1DByTree::Axis) G__int(libp->para[8]));
     } else {
       p = new((void*) gvp) TH1DByTree(
(TTree*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (double) G__double(libp->para[5])
, (double) G__double(libp->para[6]), (double) G__double(libp->para[7])
, (TH1DByTree::Axis) G__int(libp->para[8]));
     }
     break;
   case 8:
     //m: 8
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TH1DByTree(
(TTree*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (double) G__double(libp->para[5])
, (double) G__double(libp->para[6]), (double) G__double(libp->para[7]));
     } else {
       p = new((void*) gvp) TH1DByTree(
(TTree*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (double) G__double(libp->para[5])
, (double) G__double(libp->para[6]), (double) G__double(libp->para[7]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__macroRootDictLN_TH1DByTree));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_324_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TH1DByTree* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 9
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TH1DByTree(
(TTree*) G__int(libp->para[0]), (goodness_data*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (double) G__double(libp->para[5])
, (double) G__double(libp->para[6]), (double) G__double(libp->para[7])
, (TH1DByTree::Axis) G__int(libp->para[8]));
   } else {
     p = new((void*) gvp) TH1DByTree(
(TTree*) G__int(libp->para[0]), (goodness_data*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (double) G__double(libp->para[5])
, (double) G__double(libp->para[6]), (double) G__double(libp->para[7])
, (TH1DByTree::Axis) G__int(libp->para[8]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__macroRootDictLN_TH1DByTree));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_324_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((TH1DByTree*) G__getstructoffset())->FitByGaussian((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((TH1DByTree*) G__getstructoffset())->FitByGaussian((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((TH1DByTree*) G__getstructoffset())->FitByGaussian((double) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_324_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((TH1DByTree*) G__getstructoffset())->DrawGaussian((Option_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TH1DByTree*) G__getstructoffset())->DrawGaussian();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_324_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TH1DByTree*) G__getstructoffset())->GetGaussianBias());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_324_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TH1DByTree*) G__getstructoffset())->GetGaussianError());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_324_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TH1DByTree*) G__getstructoffset())->GetGaussianBiasError());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_324_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TH1DByTree*) G__getstructoffset())->GetGaussianErrorError());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_324_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TH1DByTree::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_324_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TH1DByTree::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_324_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TH1DByTree::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_324_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TH1DByTree::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_324_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TH1DByTree*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_324_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TH1DByTree::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_324_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TH1DByTree::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_324_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TH1DByTree::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_324_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TH1DByTree::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__macroRootDict_324_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TH1DByTree* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TH1DByTree(*(TH1DByTree*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__macroRootDictLN_TH1DByTree));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TH1DByTree G__TTH1DByTree;
static int G__macroRootDict_324_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TH1DByTree*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TH1DByTree*) (soff+(sizeof(TH1DByTree)*i)))->~G__TTH1DByTree();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TH1DByTree*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TH1DByTree*) (soff))->~G__TTH1DByTree();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HistError */
static int G__macroRootDict_326_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HistError* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HistError[n];
     } else {
       p = new((void*) gvp) HistError[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HistError;
     } else {
       p = new((void*) gvp) HistError;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__macroRootDictLN_HistError));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_326_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HistError* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 12
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HistError(
(FileList*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (double) G__double(libp->para[5])
, (double) G__double(libp->para[6]), (double) G__double(libp->para[7])
, (int) G__int(libp->para[8]), (double) G__double(libp->para[9])
, (double) G__double(libp->para[10]), (double) G__double(libp->para[11]));
   } else {
     p = new((void*) gvp) HistError(
(FileList*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (double) G__double(libp->para[5])
, (double) G__double(libp->para[6]), (double) G__double(libp->para[7])
, (int) G__int(libp->para[8]), (double) G__double(libp->para[9])
, (double) G__double(libp->para[10]), (double) G__double(libp->para[11]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__macroRootDictLN_HistError));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_326_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HistError::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_326_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HistError::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_326_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HistError::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_326_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HistError::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_326_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HistError*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_326_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HistError::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_326_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HistError::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_326_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HistError::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_326_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HistError::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HistError G__THistError;
static int G__macroRootDict_326_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HistError*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HistError*) (soff+(sizeof(HistError)*i)))->~G__THistError();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HistError*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HistError*) (soff))->~G__THistError();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HistBias */
static int G__macroRootDict_327_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HistBias* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HistBias[n];
     } else {
       p = new((void*) gvp) HistBias[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HistBias;
     } else {
       p = new((void*) gvp) HistBias;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__macroRootDictLN_HistBias));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_327_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HistBias* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 12
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HistBias(
(FileList*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (double) G__double(libp->para[5])
, (double) G__double(libp->para[6]), (double) G__double(libp->para[7])
, (int) G__int(libp->para[8]), (double) G__double(libp->para[9])
, (double) G__double(libp->para[10]), (double) G__double(libp->para[11]));
   } else {
     p = new((void*) gvp) HistBias(
(FileList*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (double) G__double(libp->para[5])
, (double) G__double(libp->para[6]), (double) G__double(libp->para[7])
, (int) G__int(libp->para[8]), (double) G__double(libp->para[9])
, (double) G__double(libp->para[10]), (double) G__double(libp->para[11]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__macroRootDictLN_HistBias));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_327_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HistBias::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_327_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HistBias::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_327_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HistBias::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_327_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HistBias::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_327_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HistBias*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_327_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HistBias::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_327_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HistBias::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_327_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HistBias::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_327_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HistBias::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HistBias G__THistBias;
static int G__macroRootDict_327_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HistBias*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HistBias*) (soff+(sizeof(HistBias)*i)))->~G__THistBias();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HistBias*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HistBias*) (soff))->~G__THistBias();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MultiRunAnalizeManager */
static int G__macroRootDict_328_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MultiRunAnalizeManager* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MultiRunAnalizeManager[n];
     } else {
       p = new((void*) gvp) MultiRunAnalizeManager[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MultiRunAnalizeManager;
     } else {
       p = new((void*) gvp) MultiRunAnalizeManager;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__macroRootDictLN_MultiRunAnalizeManager));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_328_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MultiRunAnalizeManager* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MultiRunAnalizeManager(
(FileList*) G__int(libp->para[0]), (FileList*) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
   } else {
     p = new((void*) gvp) MultiRunAnalizeManager(
(FileList*) G__int(libp->para[0]), (FileList*) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__macroRootDictLN_MultiRunAnalizeManager));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_328_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MultiRunAnalizeManager* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MultiRunAnalizeManager((FileList*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) MultiRunAnalizeManager((FileList*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__macroRootDictLN_MultiRunAnalizeManager));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_328_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MultiRunAnalizeManager*) G__getstructoffset())->SetGoodnessfile((FileList*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_328_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MultiRunAnalizeManager*) G__getstructoffset())->GetNRun());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_328_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MultiRunAnalizeManager*) G__getstructoffset())->Fillefficiency((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_328_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MultiRunAnalizeManager*) G__getstructoffset())->Getefficiency());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_328_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MultiRunAnalizeManager*) G__getstructoffset())->Fillerrorandbiasgaussian((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_328_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MultiRunAnalizeManager*) G__getstructoffset())->Getxerror());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_328_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MultiRunAnalizeManager*) G__getstructoffset())->Getyerror());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_328_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MultiRunAnalizeManager*) G__getstructoffset())->Getzerror());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_328_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MultiRunAnalizeManager*) G__getstructoffset())->Getxbias());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_328_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MultiRunAnalizeManager*) G__getstructoffset())->Getybias());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_328_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MultiRunAnalizeManager*) G__getstructoffset())->Getzbias());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_328_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MultiRunAnalizeManager::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_328_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MultiRunAnalizeManager::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_328_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MultiRunAnalizeManager::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_328_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MultiRunAnalizeManager::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_328_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MultiRunAnalizeManager*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_328_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MultiRunAnalizeManager::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_328_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MultiRunAnalizeManager::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_328_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MultiRunAnalizeManager::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_328_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MultiRunAnalizeManager::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MultiRunAnalizeManager G__TMultiRunAnalizeManager;
static int G__macroRootDict_328_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MultiRunAnalizeManager*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MultiRunAnalizeManager*) (soff+(sizeof(MultiRunAnalizeManager)*i)))->~G__TMultiRunAnalizeManager();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MultiRunAnalizeManager*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MultiRunAnalizeManager*) (soff))->~G__TMultiRunAnalizeManager();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* OneRunAnalizeManager */
static int G__macroRootDict_384_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   OneRunAnalizeManager* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new OneRunAnalizeManager[n];
     } else {
       p = new((void*) gvp) OneRunAnalizeManager[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new OneRunAnalizeManager;
     } else {
       p = new((void*) gvp) OneRunAnalizeManager;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__macroRootDictLN_OneRunAnalizeManager));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_384_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   OneRunAnalizeManager* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new OneRunAnalizeManager((TFile*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) OneRunAnalizeManager((TFile*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__macroRootDictLN_OneRunAnalizeManager));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_384_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   OneRunAnalizeManager* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new OneRunAnalizeManager(
(TFile*) G__int(libp->para[0]), (TFile*) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) OneRunAnalizeManager(
(TFile*) G__int(libp->para[0]), (TFile*) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new OneRunAnalizeManager((TFile*) G__int(libp->para[0]), (TFile*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) OneRunAnalizeManager((TFile*) G__int(libp->para[0]), (TFile*) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__macroRootDictLN_OneRunAnalizeManager));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_384_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((OneRunAnalizeManager*) G__getstructoffset())->SetGoodnessfile((TFile*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((OneRunAnalizeManager*) G__getstructoffset())->SetGoodnessfile((TFile*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_384_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((OneRunAnalizeManager*) G__getstructoffset())->GetXHist((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((OneRunAnalizeManager*) G__getstructoffset())->GetXHist((const char*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((OneRunAnalizeManager*) G__getstructoffset())->GetXHist());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_384_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((OneRunAnalizeManager*) G__getstructoffset())->GetYHist((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((OneRunAnalizeManager*) G__getstructoffset())->GetYHist((const char*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((OneRunAnalizeManager*) G__getstructoffset())->GetYHist());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_384_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((OneRunAnalizeManager*) G__getstructoffset())->GetZHist((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((OneRunAnalizeManager*) G__getstructoffset())->GetZHist((const char*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((OneRunAnalizeManager*) G__getstructoffset())->GetZHist());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_384_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((OneRunAnalizeManager*) G__getstructoffset())->GetTHist((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((OneRunAnalizeManager*) G__getstructoffset())->GetTHist((const char*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((OneRunAnalizeManager*) G__getstructoffset())->GetTHist());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_384_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((OneRunAnalizeManager*) G__getstructoffset())->FitByGaussianAll();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_384_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((OneRunAnalizeManager*) G__getstructoffset())->Getfgaussianx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_384_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((OneRunAnalizeManager*) G__getstructoffset())->Getfgaussiany());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_384_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((OneRunAnalizeManager*) G__getstructoffset())->Getfgaussianz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_384_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((OneRunAnalizeManager*) G__getstructoffset())->GetTH2D());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_384_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((OneRunAnalizeManager*) G__getstructoffset())->FillTH2D(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (double) G__double(libp->para[4]), (double) G__double(libp->para[5])
, (int) G__int(libp->para[6]), (double) G__double(libp->para[7])
, (double) G__double(libp->para[8]), (const char*) G__int(libp->para[9])
, (const char*) G__int(libp->para[10]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_384_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((OneRunAnalizeManager*) G__getstructoffset())->GetEfficiency());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_384_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((OneRunAnalizeManager*) G__getstructoffset())->GetWCSimRootEvent());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_384_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) OneRunAnalizeManager::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_384_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) OneRunAnalizeManager::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_384_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) OneRunAnalizeManager::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_384_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      OneRunAnalizeManager::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_384_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((OneRunAnalizeManager*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_384_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) OneRunAnalizeManager::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_384_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) OneRunAnalizeManager::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_384_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) OneRunAnalizeManager::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_384_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) OneRunAnalizeManager::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__macroRootDict_384_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   OneRunAnalizeManager* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new OneRunAnalizeManager(*(OneRunAnalizeManager*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__macroRootDictLN_OneRunAnalizeManager));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef OneRunAnalizeManager G__TOneRunAnalizeManager;
static int G__macroRootDict_384_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (OneRunAnalizeManager*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((OneRunAnalizeManager*) (soff+(sizeof(OneRunAnalizeManager)*i)))->~G__TOneRunAnalizeManager();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (OneRunAnalizeManager*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((OneRunAnalizeManager*) (soff))->~G__TOneRunAnalizeManager();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__macroRootDict_384_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   OneRunAnalizeManager* dest = (OneRunAnalizeManager*) G__getstructoffset();
   *dest = *(OneRunAnalizeManager*) libp->para[0].ref;
   const OneRunAnalizeManager& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AngleRange */
static int G__macroRootDict_385_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AngleRange* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AngleRange[n];
     } else {
       p = new((void*) gvp) AngleRange[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AngleRange;
     } else {
       p = new((void*) gvp) AngleRange;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__macroRootDictLN_AngleRange));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_385_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AngleRange*) G__getstructoffset())->Setrange(*((AngleRange*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_385_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AngleRange*) G__getstructoffset())->GetCosthetamin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_385_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AngleRange*) G__getstructoffset())->SetCosthetamin((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_385_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AngleRange*) G__getstructoffset())->GetCosthetawidth());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_385_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AngleRange*) G__getstructoffset())->SetCosthetawidth((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_385_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AngleRange*) G__getstructoffset())->GetCosthetaNum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_385_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AngleRange*) G__getstructoffset())->SetCosthetaNum((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_385_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AngleRange*) G__getstructoffset())->GetPhimin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_385_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AngleRange*) G__getstructoffset())->SetPhimin((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_385_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AngleRange*) G__getstructoffset())->GetPhiwidth());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_385_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AngleRange*) G__getstructoffset())->SetPhiwidth((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_385_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const AngleRange*) G__getstructoffset())->GetPhiNum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_385_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AngleRange*) G__getstructoffset())->SetPhiNum((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_385_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AngleRange::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_385_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AngleRange::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_385_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AngleRange::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_385_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AngleRange::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_385_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AngleRange*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_385_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AngleRange::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_385_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AngleRange::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_385_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AngleRange::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__macroRootDict_385_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AngleRange::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__macroRootDict_385_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   AngleRange* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new AngleRange(*(AngleRange*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__macroRootDictLN_AngleRange));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AngleRange G__TAngleRange;
static int G__macroRootDict_385_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AngleRange*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AngleRange*) (soff+(sizeof(AngleRange)*i)))->~G__TAngleRange();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AngleRange*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AngleRange*) (soff))->~G__TAngleRange();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__macroRootDict_385_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AngleRange* dest = (AngleRange*) G__getstructoffset();
   *dest = *(AngleRange*) libp->para[0].ref;
   const AngleRange& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* Eventdisplay */

/* goodness_data */

/* l_dir_data */

/* AnalizedData */

/* C4Number */

/* CSearch_range */

/* FileList */

/* efficiency */

/* TH1DByTree */

/* HistError */

/* HistBias */

/* MultiRunAnalizeManager */

/* OneRunAnalizeManager */

/* AngleRange */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncmacroRootDict {
 public:
  G__Sizep2memfuncmacroRootDict(): p(&G__Sizep2memfuncmacroRootDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncmacroRootDict::*p)();
};

size_t G__get_sizep2memfuncmacroRootDict()
{
  G__Sizep2memfuncmacroRootDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritancemacroRootDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__macroRootDictLN_Eventdisplay))) {
     Eventdisplay *G__Lderived;
     G__Lderived=(Eventdisplay*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__macroRootDictLN_Eventdisplay),G__get_linked_tagnum(&G__macroRootDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__macroRootDictLN_Eventdisplay),G__get_linked_tagnum(&G__macroRootDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__macroRootDictLN_goodness_data))) {
     goodness_data *G__Lderived;
     G__Lderived=(goodness_data*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__macroRootDictLN_goodness_data),G__get_linked_tagnum(&G__macroRootDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__macroRootDictLN_l_dir_data))) {
     l_dir_data *G__Lderived;
     G__Lderived=(l_dir_data*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__macroRootDictLN_l_dir_data),G__get_linked_tagnum(&G__macroRootDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__macroRootDictLN_AnalizedData))) {
     AnalizedData *G__Lderived;
     G__Lderived=(AnalizedData*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__macroRootDictLN_AnalizedData),G__get_linked_tagnum(&G__macroRootDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__macroRootDictLN_C4Number))) {
     C4Number *G__Lderived;
     G__Lderived=(C4Number*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__macroRootDictLN_C4Number),G__get_linked_tagnum(&G__macroRootDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__macroRootDictLN_CSearch_range))) {
     CSearch_range *G__Lderived;
     G__Lderived=(CSearch_range*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__macroRootDictLN_CSearch_range),G__get_linked_tagnum(&G__macroRootDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__macroRootDictLN_FileList))) {
     FileList *G__Lderived;
     G__Lderived=(FileList*)0x1000;
     {
       TClonesArray *G__Lpbase=(TClonesArray*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__macroRootDictLN_FileList),G__get_linked_tagnum(&G__macroRootDictLN_TClonesArray),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObjArray *G__Lpbase=(TObjArray*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__macroRootDictLN_FileList),G__get_linked_tagnum(&G__macroRootDictLN_TObjArray),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TSeqCollection *G__Lpbase=(TSeqCollection*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__macroRootDictLN_FileList),G__get_linked_tagnum(&G__macroRootDictLN_TSeqCollection),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TCollection *G__Lpbase=(TCollection*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__macroRootDictLN_FileList),G__get_linked_tagnum(&G__macroRootDictLN_TCollection),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__macroRootDictLN_FileList),G__get_linked_tagnum(&G__macroRootDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__macroRootDictLN_efficiency))) {
     efficiency *G__Lderived;
     G__Lderived=(efficiency*)0x1000;
     {
       TH1D *G__Lpbase=(TH1D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__macroRootDictLN_efficiency),G__get_linked_tagnum(&G__macroRootDictLN_TH1D),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TH1 *G__Lpbase=(TH1*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__macroRootDictLN_efficiency),G__get_linked_tagnum(&G__macroRootDictLN_TH1),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__macroRootDictLN_efficiency),G__get_linked_tagnum(&G__macroRootDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__macroRootDictLN_efficiency),G__get_linked_tagnum(&G__macroRootDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttLine *G__Lpbase=(TAttLine*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__macroRootDictLN_efficiency),G__get_linked_tagnum(&G__macroRootDictLN_TAttLine),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttFill *G__Lpbase=(TAttFill*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__macroRootDictLN_efficiency),G__get_linked_tagnum(&G__macroRootDictLN_TAttFill),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttMarker *G__Lpbase=(TAttMarker*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__macroRootDictLN_efficiency),G__get_linked_tagnum(&G__macroRootDictLN_TAttMarker),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TArrayD *G__Lpbase=(TArrayD*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__macroRootDictLN_efficiency),G__get_linked_tagnum(&G__macroRootDictLN_TArrayD),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TArray *G__Lpbase=(TArray*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__macroRootDictLN_efficiency),G__get_linked_tagnum(&G__macroRootDictLN_TArray),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__macroRootDictLN_TH1DByTree))) {
     TH1DByTree *G__Lderived;
     G__Lderived=(TH1DByTree*)0x1000;
     {
       TH1D *G__Lpbase=(TH1D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__macroRootDictLN_TH1DByTree),G__get_linked_tagnum(&G__macroRootDictLN_TH1D),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TH1 *G__Lpbase=(TH1*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__macroRootDictLN_TH1DByTree),G__get_linked_tagnum(&G__macroRootDictLN_TH1),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__macroRootDictLN_TH1DByTree),G__get_linked_tagnum(&G__macroRootDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__macroRootDictLN_TH1DByTree),G__get_linked_tagnum(&G__macroRootDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttLine *G__Lpbase=(TAttLine*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__macroRootDictLN_TH1DByTree),G__get_linked_tagnum(&G__macroRootDictLN_TAttLine),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttFill *G__Lpbase=(TAttFill*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__macroRootDictLN_TH1DByTree),G__get_linked_tagnum(&G__macroRootDictLN_TAttFill),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttMarker *G__Lpbase=(TAttMarker*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__macroRootDictLN_TH1DByTree),G__get_linked_tagnum(&G__macroRootDictLN_TAttMarker),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TArrayD *G__Lpbase=(TArrayD*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__macroRootDictLN_TH1DByTree),G__get_linked_tagnum(&G__macroRootDictLN_TArrayD),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TArray *G__Lpbase=(TArray*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__macroRootDictLN_TH1DByTree),G__get_linked_tagnum(&G__macroRootDictLN_TArray),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__macroRootDictLN_HistError))) {
     HistError *G__Lderived;
     G__Lderived=(HistError*)0x1000;
     {
       TH1D *G__Lpbase=(TH1D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__macroRootDictLN_HistError),G__get_linked_tagnum(&G__macroRootDictLN_TH1D),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TH1 *G__Lpbase=(TH1*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__macroRootDictLN_HistError),G__get_linked_tagnum(&G__macroRootDictLN_TH1),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__macroRootDictLN_HistError),G__get_linked_tagnum(&G__macroRootDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__macroRootDictLN_HistError),G__get_linked_tagnum(&G__macroRootDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttLine *G__Lpbase=(TAttLine*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__macroRootDictLN_HistError),G__get_linked_tagnum(&G__macroRootDictLN_TAttLine),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttFill *G__Lpbase=(TAttFill*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__macroRootDictLN_HistError),G__get_linked_tagnum(&G__macroRootDictLN_TAttFill),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttMarker *G__Lpbase=(TAttMarker*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__macroRootDictLN_HistError),G__get_linked_tagnum(&G__macroRootDictLN_TAttMarker),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TArrayD *G__Lpbase=(TArrayD*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__macroRootDictLN_HistError),G__get_linked_tagnum(&G__macroRootDictLN_TArrayD),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TArray *G__Lpbase=(TArray*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__macroRootDictLN_HistError),G__get_linked_tagnum(&G__macroRootDictLN_TArray),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__macroRootDictLN_HistBias))) {
     HistBias *G__Lderived;
     G__Lderived=(HistBias*)0x1000;
     {
       TH1D *G__Lpbase=(TH1D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__macroRootDictLN_HistBias),G__get_linked_tagnum(&G__macroRootDictLN_TH1D),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TH1 *G__Lpbase=(TH1*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__macroRootDictLN_HistBias),G__get_linked_tagnum(&G__macroRootDictLN_TH1),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__macroRootDictLN_HistBias),G__get_linked_tagnum(&G__macroRootDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__macroRootDictLN_HistBias),G__get_linked_tagnum(&G__macroRootDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttLine *G__Lpbase=(TAttLine*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__macroRootDictLN_HistBias),G__get_linked_tagnum(&G__macroRootDictLN_TAttLine),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttFill *G__Lpbase=(TAttFill*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__macroRootDictLN_HistBias),G__get_linked_tagnum(&G__macroRootDictLN_TAttFill),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttMarker *G__Lpbase=(TAttMarker*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__macroRootDictLN_HistBias),G__get_linked_tagnum(&G__macroRootDictLN_TAttMarker),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TArrayD *G__Lpbase=(TArrayD*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__macroRootDictLN_HistBias),G__get_linked_tagnum(&G__macroRootDictLN_TArrayD),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TArray *G__Lpbase=(TArray*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__macroRootDictLN_HistBias),G__get_linked_tagnum(&G__macroRootDictLN_TArray),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__macroRootDictLN_MultiRunAnalizeManager))) {
     MultiRunAnalizeManager *G__Lderived;
     G__Lderived=(MultiRunAnalizeManager*)0x1000;
     {
       TClonesArray *G__Lpbase=(TClonesArray*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__macroRootDictLN_MultiRunAnalizeManager),G__get_linked_tagnum(&G__macroRootDictLN_TClonesArray),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObjArray *G__Lpbase=(TObjArray*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__macroRootDictLN_MultiRunAnalizeManager),G__get_linked_tagnum(&G__macroRootDictLN_TObjArray),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TSeqCollection *G__Lpbase=(TSeqCollection*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__macroRootDictLN_MultiRunAnalizeManager),G__get_linked_tagnum(&G__macroRootDictLN_TSeqCollection),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TCollection *G__Lpbase=(TCollection*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__macroRootDictLN_MultiRunAnalizeManager),G__get_linked_tagnum(&G__macroRootDictLN_TCollection),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__macroRootDictLN_MultiRunAnalizeManager),G__get_linked_tagnum(&G__macroRootDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__macroRootDictLN_OneRunAnalizeManager))) {
     OneRunAnalizeManager *G__Lderived;
     G__Lderived=(OneRunAnalizeManager*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__macroRootDictLN_OneRunAnalizeManager),G__get_linked_tagnum(&G__macroRootDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__macroRootDictLN_AngleRange))) {
     AngleRange *G__Lderived;
     G__Lderived=(AngleRange*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__macroRootDictLN_AngleRange),G__get_linked_tagnum(&G__macroRootDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetablemacroRootDict() {

   /* Setting up typedef entry */
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Option_t",99,-1,256,-1);
   G__setnewtype(-1,"Option string (const char)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__macroRootDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__macroRootDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__macroRootDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__macroRootDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__macroRootDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__macroRootDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__macroRootDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__macroRootDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__macroRootDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__macroRootDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__macroRootDictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__macroRootDictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__macroRootDictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__macroRootDictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G__macroRootDictLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G__macroRootDictLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G__macroRootDictLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G__macroRootDictLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G__macroRootDictLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G__macroRootDictLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G__macroRootDictLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G__macroRootDictLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G__macroRootDictLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G__macroRootDictLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G__macroRootDictLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G__macroRootDictLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G__macroRootDictLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G__macroRootDictLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G__macroRootDictLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G__macroRootDictLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G__macroRootDictLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__macroRootDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__macroRootDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__macroRootDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__macroRootDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__macroRootDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,TObjArray*>",117,G__get_linked_tagnum(&G__macroRootDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__macroRootDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__macroRootDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*,less<string> >",117,G__get_linked_tagnum(&G__macroRootDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__macroRootDictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__macroRootDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__macroRootDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__macroRootDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__macroRootDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Float_t>",117,G__get_linked_tagnum(&G__macroRootDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__macroRootDictLN_reverse_iteratorlEvectorlEfloatcOallocatorlEfloatgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__macroRootDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__macroRootDictLN_reverse_iteratorlEvectorlEfloatcOallocatorlEfloatgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__macroRootDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<float>",117,G__get_linked_tagnum(&G__macroRootDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Int_t>",117,G__get_linked_tagnum(&G__macroRootDictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* Eventdisplay */
static void G__setup_memvarEventdisplay(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__macroRootDictLN_Eventdisplay));
   { Eventdisplay *p; p=(Eventdisplay*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__macroRootDictLN_TH2D),-1,-1,2,"hall=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__macroRootDictLN_TH2D),-1,-1,2,"hcharge=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__macroRootDictLN_TH2D),-1,-1,2,"htime=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__macroRootDictLN_TH2D),-1,-1,2,"hhit=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__macroRootDictLN_TArc),-1,-1,2,"a1=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__macroRootDictLN_TArc),-1,-1,2,"a2=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__macroRootDictLN_TPave),-1,-1,2,"p1=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"WCradius=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"WClength=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__macroRootDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* goodness_data */
static void G__setup_memvargoodness_data(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__macroRootDictLN_goodness_data));
   { goodness_data *p; p=(goodness_data*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__macroRootDictLN_TLorentzVector),-1,-1,4,"vector=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"goodness=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__macroRootDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* l_dir_data */
static void G__setup_memvarl_dir_data(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__macroRootDictLN_l_dir_data));
   { l_dir_data *p; p=(l_dir_data*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"likelihood=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"costheta=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"phi=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__macroRootDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AnalizedData */
static void G__setup_memvarAnalizedData(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__macroRootDictLN_AnalizedData));
   { AnalizedData *p; p=(AnalizedData*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__macroRootDictLN_goodness_data),-1,-1,4,"gdatagridsearch=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__macroRootDictLN_l_dir_data),-1,-1,4,"ldatagridsearch=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__macroRootDictLN_goodness_data),-1,-1,4,"gdataminimized=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__macroRootDictLN_l_dir_data),-1,-1,4,"ldataminimized=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__macroRootDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* C4Number */
static void G__setup_memvarC4Number(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__macroRootDictLN_C4Number));
   { C4Number *p; p=(C4Number*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"x=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"y=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"z=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"t=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__macroRootDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* CSearch_range */
static void G__setup_memvarCSearch_range(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__macroRootDictLN_CSearch_range));
   { CSearch_range *p; p=(CSearch_range*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__macroRootDictLN_TLorentzVector),-1,-1,4,"search_min=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__macroRootDictLN_TLorentzVector),-1,-1,4,"search_width=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__macroRootDictLN_C4Number),-1,-1,4,"search_number=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__macroRootDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FileList */
static void G__setup_memvarFileList(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__macroRootDictLN_FileList));
   { FileList *p; p=(FileList*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__macroRootDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* efficiency */
static void G__setup_memvarefficiency(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__macroRootDictLN_efficiency));
   { efficiency *p; p=(efficiency*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__macroRootDictLN_FileList),-1,-1,4,"filelist=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"Nevent=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__macroRootDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TH1DByTree */
static void G__setup_memvarTH1DByTree(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__macroRootDictLN_TH1DByTree));
   { TH1DByTree *p; p=(TH1DByTree*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__macroRootDictLN_TH1DByTreecLcLAxis),-1,-2,1,G__FastAllocString(2048).Format("x=%lldLL",(long long)TH1DByTree::x).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__macroRootDictLN_TH1DByTreecLcLAxis),-1,-2,1,G__FastAllocString(2048).Format("y=%lldLL",(long long)TH1DByTree::y).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__macroRootDictLN_TH1DByTreecLcLAxis),-1,-2,1,G__FastAllocString(2048).Format("z=%lldLL",(long long)TH1DByTree::z).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__macroRootDictLN_TH1DByTreecLcLAxis),-1,-2,1,G__FastAllocString(2048).Format("t=%lldLL",(long long)TH1DByTree::t).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__macroRootDictLN_TF1),-1,-1,4,"fgaussian=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"Nevent=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"central=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__macroRootDictLN_TH1DByTreecLcLAxis),-1,-1,4,"axis=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__macroRootDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HistError */
static void G__setup_memvarHistError(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__macroRootDictLN_HistError));
   { HistError *p; p=(HistError*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__macroRootDictLN_FileList),-1,-1,4,"filelist=",0,(char*)NULL);
   G__memvar_setup((void*)0,67,0,1,-1,-1,-1,4,"paraname=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"numorig=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"minorig=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"maxorig=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"widthorig=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__macroRootDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HistBias */
static void G__setup_memvarHistBias(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__macroRootDictLN_HistBias));
   { HistBias *p; p=(HistBias*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__macroRootDictLN_FileList),-1,-1,4,"filelist=",0,(char*)NULL);
   G__memvar_setup((void*)0,67,0,1,-1,-1,-1,4,"paraname=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"numorig=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"minorig=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"maxorig=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"widthorig=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__macroRootDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MultiRunAnalizeManager */
static void G__setup_memvarMultiRunAnalizeManager(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__macroRootDictLN_MultiRunAnalizeManager));
   { MultiRunAnalizeManager *p; p=(MultiRunAnalizeManager*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"NRun=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__macroRootDictLN_TH1D),-1,-1,4,"efficiency=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__macroRootDictLN_TH1D),-1,-1,4,"xerror=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__macroRootDictLN_TH1D),-1,-1,4,"yerror=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__macroRootDictLN_TH1D),-1,-1,4,"zerror=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__macroRootDictLN_TH1D),-1,-1,4,"xbias=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__macroRootDictLN_TH1D),-1,-1,4,"ybias=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__macroRootDictLN_TH1D),-1,-1,4,"zbias=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__macroRootDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* OneRunAnalizeManager */
static void G__setup_memvarOneRunAnalizeManager(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__macroRootDictLN_OneRunAnalizeManager));
   { OneRunAnalizeManager *p; p=(OneRunAnalizeManager*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__macroRootDictLN_TFile),-1,-1,4,"dfile=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__macroRootDictLN_TFile),-1,-1,4,"gfile=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__macroRootDictLN_TTree),-1,-1,4,"wcsimT=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__macroRootDictLN_TTree),-1,-1,4,"wcsimGeoT=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__macroRootDictLN_TTree),-1,-1,4,"goodnessT=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__macroRootDictLN_TTree),-1,-1,4,"optionT=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__macroRootDictLN_goodness_data),-1,-1,4,"gdata=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__macroRootDictLN_CSearch_range),-1,-1,4,"range=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__macroRootDictLN_WCSimRootEvent),-1,-1,4,"wcsimrootevent=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__macroRootDictLN_WCSimRootGeom),-1,-1,4,"wcsimrootgeom=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__macroRootDictLN_TH1D),-1,-1,4,"xhist=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__macroRootDictLN_TH1D),-1,-1,4,"yhist=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__macroRootDictLN_TH1D),-1,-1,4,"zhist=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__macroRootDictLN_TH1D),-1,-1,4,"thist=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__macroRootDictLN_TF1),-1,-1,4,"fgaussianx=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__macroRootDictLN_TF1),-1,-1,4,"fgaussiany=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__macroRootDictLN_TF1),-1,-1,4,"fgaussianz=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__macroRootDictLN_TH2D),-1,-1,4,"th2d=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"nevent=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__macroRootDictLN_string),-1,-1,4,"s_fgaussianx=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__macroRootDictLN_string),-1,-1,4,"s_fgaussiany=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__macroRootDictLN_string),-1,-1,4,"s_fgaussianz=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__macroRootDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,4,"vncherenkovdigihits=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__macroRootDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AngleRange */
static void G__setup_memvarAngleRange(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__macroRootDictLN_AngleRange));
   { AngleRange *p; p=(AngleRange*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"costhetamin=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"costhetawidth=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"costhetanum=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"phimin=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"phiwidth=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"phinum=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__macroRootDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarmacroRootDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncEventdisplay(void) {
   /* Eventdisplay */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__macroRootDictLN_Eventdisplay));
   G__memfunc_setup("Eventdisplay",1272,G__macroRootDict_193_0_1, 105, G__get_linked_tagnum(&G__macroRootDictLN_Eventdisplay), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Eventdisplay",1272,G__macroRootDict_193_0_2, 105, G__get_linked_tagnum(&G__macroRootDictLN_Eventdisplay), -1, 0, 2, 1, 1, 0, 
"C - - 0 - name C - - 0 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Eventdisplay",1272,G__macroRootDict_193_0_3, 105, G__get_linked_tagnum(&G__macroRootDictLN_Eventdisplay), -1, 0, 6, 1, 1, 0, 
"C - - 10 - infile C - - 0 - name "
"C - - 0 - title i - - 0 '0' nevent "
"i - - 0 '150' xbin i - - 0 '147' ybin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set",300,G__macroRootDict_193_0_4, 121, -1, -1, 0, 4, 1, 1, 0, 
"C - - 10 - infile i - - 0 '0' nevent "
"i - - 0 '150' xbin i - - 0 '147' ybin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Drawall",711,G__macroRootDict_193_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"colz\"' option", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Drawcharge",1016,G__macroRootDict_193_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"colz\"' option", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Drawtime",829,G__macroRootDict_193_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"colz\"' option", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Drawhit",723,G__macroRootDict_193_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"colz\"' option", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Gethall",705,G__macroRootDict_193_0_9, 85, G__get_linked_tagnum(&G__macroRootDictLN_TH2D), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Gethcharge",1010,G__macroRootDict_193_0_10, 85, G__get_linked_tagnum(&G__macroRootDictLN_TH2D), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Gethtime",823,G__macroRootDict_193_0_11, 85, G__get_linked_tagnum(&G__macroRootDictLN_TH2D), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Gethhit",717,G__macroRootDict_193_0_12, 85, G__get_linked_tagnum(&G__macroRootDictLN_TH2D), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Add",265,G__macroRootDict_193_0_13, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"U 'Eventdisplay' - 0 - eventdisplay1 U 'Eventdisplay' - 0 - eventdisplay2 "
"d - 'Double_t' 0 '1.' c1 d - 'Double_t' 0 '1.' c2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Add",265,G__macroRootDict_193_0_14, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'Eventdisplay' - 0 - eventdisplay1 d - 'Double_t' 0 '1.' c1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetWCradius",1090,G__macroRootDict_193_0_15, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetWClength",1084,G__macroRootDict_193_0_16, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Sum",309,G__macroRootDict_193_0_17, 85, G__get_linked_tagnum(&G__macroRootDictLN_Eventdisplay), -1, 0, 6, 3, 1, 0, 
"C - - 10 - infile C - - 0 - name "
"C - - 0 - title i - - 0 - nevents "
"i - - 0 '150' xbin i - - 0 '147' ybin", (char*)NULL, (void*) G__func2void( (Eventdisplay* (*)(const char*, char*, char*, int, int, int))(&Eventdisplay::Sum) ), 0);
   G__memfunc_setup("Class",502,G__macroRootDict_193_0_18, 85, G__get_linked_tagnum(&G__macroRootDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Eventdisplay::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__macroRootDict_193_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Eventdisplay::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__macroRootDict_193_0_20, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Eventdisplay::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__macroRootDict_193_0_21, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Eventdisplay::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__macroRootDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__macroRootDict_193_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__macroRootDict_193_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Eventdisplay::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__macroRootDict_193_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Eventdisplay::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__macroRootDict_193_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Eventdisplay::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__macroRootDict_193_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Eventdisplay::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Eventdisplay", 1272, G__macroRootDict_193_0_30, (int) ('i'), G__get_linked_tagnum(&G__macroRootDictLN_Eventdisplay), -1, 0, 1, 1, 1, 0, "u 'Eventdisplay' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Eventdisplay", 1398, G__macroRootDict_193_0_31, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgoodness_data(void) {
   /* goodness_data */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__macroRootDictLN_goodness_data));
   G__memfunc_setup("goodness_data",1371,G__macroRootDict_232_0_1, 105, G__get_linked_tagnum(&G__macroRootDictLN_goodness_data), -1, 0, 2, 1, 1, 0, 
"u 'TLorentzVector' - 0 - vector d - - 0 '0' goodness", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("goodness_data",1371,G__macroRootDict_232_0_2, 105, G__get_linked_tagnum(&G__macroRootDictLN_goodness_data), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetT",372,G__macroRootDict_232_0_3, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetX",376,G__macroRootDict_232_0_4, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetY",377,G__macroRootDict_232_0_5, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZ",378,G__macroRootDict_232_0_6, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPosition",1141,G__macroRootDict_232_0_7, 117, G__get_linked_tagnum(&G__macroRootDictLN_TVector3), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Get4Vector",967,G__macroRootDict_232_0_8, 117, G__get_linked_tagnum(&G__macroRootDictLN_TLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Getgoodness",1154,G__macroRootDict_232_0_9, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set4Vector",979,G__macroRootDict_232_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TLorentzVector' - 0 - vector_input", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Setgoodness",1166,G__macroRootDict_232_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - goodness_input", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Setdata",710,G__macroRootDict_232_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'goodness_data' - 0 - data", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__macroRootDict_232_0_13, 85, G__get_linked_tagnum(&G__macroRootDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&goodness_data::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__macroRootDict_232_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&goodness_data::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__macroRootDict_232_0_15, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&goodness_data::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__macroRootDict_232_0_16, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&goodness_data::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__macroRootDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__macroRootDict_232_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__macroRootDict_232_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&goodness_data::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__macroRootDict_232_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&goodness_data::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__macroRootDict_232_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&goodness_data::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__macroRootDict_232_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&goodness_data::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("goodness_data", 1371, G__macroRootDict_232_0_25, (int) ('i'), G__get_linked_tagnum(&G__macroRootDictLN_goodness_data), -1, 0, 1, 1, 1, 0, "u 'goodness_data' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~goodness_data", 1497, G__macroRootDict_232_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__macroRootDict_232_0_27, (int) ('u'), G__get_linked_tagnum(&G__macroRootDictLN_goodness_data), -1, 1, 1, 1, 1, 0, "u 'goodness_data' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncl_dir_data(void) {
   /* l_dir_data */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__macroRootDictLN_l_dir_data));
   G__memfunc_setup("l_dir_data",1027,G__macroRootDict_233_0_1, 105, G__get_linked_tagnum(&G__macroRootDictLN_l_dir_data), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("l_dir_data",1027,G__macroRootDict_233_0_2, 105, G__get_linked_tagnum(&G__macroRootDictLN_l_dir_data), -1, 0, 3, 1, 1, 0, 
"d - - 0 - costheta_in d - - 0 - phi_in "
"d - - 0 - likelihood_in", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Setdata",710,G__macroRootDict_233_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "u 'l_dir_data' - 0 - data", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetL",376,G__macroRootDict_233_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - l", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCosTheta",1095,G__macroRootDict_233_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - costheta_in", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPhi",589,G__macroRootDict_233_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - phi_in", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetL",364,G__macroRootDict_233_0_7, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCosTheta",1083,G__macroRootDict_233_0_8, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPhi",577,G__macroRootDict_233_0_9, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__macroRootDict_233_0_10, 85, G__get_linked_tagnum(&G__macroRootDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&l_dir_data::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__macroRootDict_233_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&l_dir_data::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__macroRootDict_233_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&l_dir_data::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__macroRootDict_233_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&l_dir_data::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__macroRootDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__macroRootDict_233_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__macroRootDict_233_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&l_dir_data::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__macroRootDict_233_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&l_dir_data::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__macroRootDict_233_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&l_dir_data::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__macroRootDict_233_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&l_dir_data::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("l_dir_data", 1027, G__macroRootDict_233_0_22, (int) ('i'), G__get_linked_tagnum(&G__macroRootDictLN_l_dir_data), -1, 0, 1, 1, 1, 0, "u 'l_dir_data' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~l_dir_data", 1153, G__macroRootDict_233_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__macroRootDict_233_0_24, (int) ('u'), G__get_linked_tagnum(&G__macroRootDictLN_l_dir_data), -1, 1, 1, 1, 1, 0, "u 'l_dir_data' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAnalizedData(void) {
   /* AnalizedData */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__macroRootDictLN_AnalizedData));
   G__memfunc_setup("AnalizedData",1186,G__macroRootDict_234_0_1, 105, G__get_linked_tagnum(&G__macroRootDictLN_AnalizedData), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AnalizedData",1186,G__macroRootDict_234_0_2, 105, G__get_linked_tagnum(&G__macroRootDictLN_AnalizedData), -1, 0, 4, 1, 1, 0, 
"u 'goodness_data' - 0 - gdatagridsearch_in u 'l_dir_data' - 0 - ldatagridsearch_in "
"u 'goodness_data' - 0 - gdataminimized_in u 'l_dir_data' - 0 - ldataminimized_in", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Getgdatagridsearch",1853,G__macroRootDict_234_0_3, 117, G__get_linked_tagnum(&G__macroRootDictLN_goodness_data), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Getldatagridsearch",1858,G__macroRootDict_234_0_4, 117, G__get_linked_tagnum(&G__macroRootDictLN_l_dir_data), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Getdataminimized",1664,G__macroRootDict_234_0_5, 117, G__get_linked_tagnum(&G__macroRootDictLN_goodness_data), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Getldataminimized",1772,G__macroRootDict_234_0_6, 117, G__get_linked_tagnum(&G__macroRootDictLN_l_dir_data), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Setgdatagridsearch",1865,G__macroRootDict_234_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "u 'goodness_data' - 0 - gdata", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Setldatagridsearch",1870,G__macroRootDict_234_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'l_dir_data' - 0 - ldata", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Setgdataminimized",1779,G__macroRootDict_234_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'goodness_data' - 0 - gdata", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Setldataminimized",1784,G__macroRootDict_234_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'l_dir_data' - 0 - ldata", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__macroRootDict_234_0_11, 85, G__get_linked_tagnum(&G__macroRootDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AnalizedData::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__macroRootDict_234_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AnalizedData::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__macroRootDict_234_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AnalizedData::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__macroRootDict_234_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AnalizedData::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__macroRootDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__macroRootDict_234_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__macroRootDict_234_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AnalizedData::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__macroRootDict_234_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AnalizedData::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__macroRootDict_234_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AnalizedData::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__macroRootDict_234_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AnalizedData::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("AnalizedData", 1186, G__macroRootDict_234_0_23, (int) ('i'), G__get_linked_tagnum(&G__macroRootDictLN_AnalizedData), -1, 0, 1, 1, 1, 0, "u 'AnalizedData' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~AnalizedData", 1312, G__macroRootDict_234_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__macroRootDict_234_0_25, (int) ('u'), G__get_linked_tagnum(&G__macroRootDictLN_AnalizedData), -1, 1, 1, 1, 1, 0, "u 'AnalizedData' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncC4Number(void) {
   /* C4Number */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__macroRootDictLN_C4Number));
   G__memfunc_setup("C4Number",736,G__macroRootDict_235_0_1, 105, G__get_linked_tagnum(&G__macroRootDictLN_C4Number), -1, 0, 4, 1, 1, 0, 
"i - - 0 - x i - - 0 - y "
"i - - 0 - z i - - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("C4Number",736,G__macroRootDict_235_0_2, 105, G__get_linked_tagnum(&G__macroRootDictLN_C4Number), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetX",376,G__macroRootDict_235_0_3, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetY",377,G__macroRootDict_235_0_4, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZ",378,G__macroRootDict_235_0_5, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetT",372,G__macroRootDict_235_0_6, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetX",388,G__macroRootDict_235_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - x_set", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetY",389,G__macroRootDict_235_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - y_set", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetZ",390,G__macroRootDict_235_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - z_set", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetT",384,G__macroRootDict_235_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - t_set", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Printnumber",1174,G__macroRootDict_235_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+",919,G__macroRootDict_235_0_12, 117, G__get_linked_tagnum(&G__macroRootDictLN_C4Number), -1, 0, 1, 1, 1, 8, "u 'C4Number' - 41 - right", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-",921,G__macroRootDict_235_0_13, 117, G__get_linked_tagnum(&G__macroRootDictLN_C4Number), -1, 0, 1, 1, 1, 8, "u 'C4Number' - 41 - right", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__macroRootDict_235_0_14, 103, -1, -1, 0, 1, 1, 1, 8, "u 'C4Number' - 41 - right", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__macroRootDict_235_0_15, 103, -1, -1, 0, 1, 1, 1, 8, "u 'C4Number' - 41 - right", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__macroRootDict_235_0_16, 105, -1, -1, 0, 1, 1, 1, 8, "u 'C4Number' - 41 - right", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__macroRootDict_235_0_17, 85, G__get_linked_tagnum(&G__macroRootDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&C4Number::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__macroRootDict_235_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&C4Number::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__macroRootDict_235_0_19, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&C4Number::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__macroRootDict_235_0_20, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&C4Number::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__macroRootDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__macroRootDict_235_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__macroRootDict_235_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&C4Number::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__macroRootDict_235_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&C4Number::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__macroRootDict_235_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&C4Number::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__macroRootDict_235_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&C4Number::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("C4Number", 736, G__macroRootDict_235_0_29, (int) ('i'), G__get_linked_tagnum(&G__macroRootDictLN_C4Number), -1, 0, 1, 1, 1, 0, "u 'C4Number' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~C4Number", 862, G__macroRootDict_235_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__macroRootDict_235_0_31, (int) ('u'), G__get_linked_tagnum(&G__macroRootDictLN_C4Number), -1, 1, 1, 1, 1, 0, "u 'C4Number' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncCSearch_range(void) {
   /* CSearch_range */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__macroRootDictLN_CSearch_range));
   G__memfunc_setup("CSearch_range",1285,G__macroRootDict_236_0_1, 105, G__get_linked_tagnum(&G__macroRootDictLN_CSearch_range), -1, 0, 3, 1, 1, 0, 
"u 'TLorentzVector' - 0 - search_min u 'TLorentzVector' - 0 - search_width "
"u 'C4Number' - 0 - search_number", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CSearch_range",1285,G__macroRootDict_236_0_2, 105, G__get_linked_tagnum(&G__macroRootDictLN_CSearch_range), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Setrange",825,G__macroRootDict_236_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "u 'CSearch_range' - 0 - range_in", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetN",366,G__macroRootDict_236_0_4, 105, -1, -1, 0, 0, 1, 1, 8, "", "Number of grid search.", (void*) NULL, 0);
   G__memfunc_setup("GetXmin",700,G__macroRootDict_236_0_5, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetYmin",701,G__macroRootDict_236_0_6, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZmin",702,G__macroRootDict_236_0_7, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTmin",696,G__macroRootDict_236_0_8, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetXwidth",920,G__macroRootDict_236_0_9, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetYwidth",921,G__macroRootDict_236_0_10, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZwidth",922,G__macroRootDict_236_0_11, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTwidth",916,G__macroRootDict_236_0_12, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetXNum",680,G__macroRootDict_236_0_13, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetYNum",681,G__macroRootDict_236_0_14, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZNum",682,G__macroRootDict_236_0_15, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTNum",676,G__macroRootDict_236_0_16, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetXmax",702,G__macroRootDict_236_0_17, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetYmax",703,G__macroRootDict_236_0_18, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZmax",704,G__macroRootDict_236_0_19, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTmax",698,G__macroRootDict_236_0_20, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetXcentral",1121,G__macroRootDict_236_0_21, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetYcentral",1122,G__macroRootDict_236_0_22, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZcentral",1123,G__macroRootDict_236_0_23, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTcentral",1117,G__macroRootDict_236_0_24, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetXallwidth",1233,G__macroRootDict_236_0_25, 100, -1, -1, 0, 0, 1, 1, 8, "", "whole range of each direction. max - min", (void*) NULL, 0);
   G__memfunc_setup("GetYallwidth",1234,G__macroRootDict_236_0_26, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZallwidth",1235,G__macroRootDict_236_0_27, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTallwidth",1229,G__macroRootDict_236_0_28, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Setmin",624,G__macroRootDict_236_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TLorentzVector' - 0 - search_min_input", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Setwidth",844,G__macroRootDict_236_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TLorentzVector' - 0 - search_width_input", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNum",604,G__macroRootDict_236_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "u 'C4Number' - 0 - search_number_input", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Getmin",612,G__macroRootDict_236_0_32, 117, G__get_linked_tagnum(&G__macroRootDictLN_TLorentzVector), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Getwidth",832,G__macroRootDict_236_0_33, 117, G__get_linked_tagnum(&G__macroRootDictLN_TLorentzVector), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNum",592,G__macroRootDict_236_0_34, 117, G__get_linked_tagnum(&G__macroRootDictLN_C4Number), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Printrange",1050,G__macroRootDict_236_0_35, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__macroRootDict_236_0_36, 85, G__get_linked_tagnum(&G__macroRootDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&CSearch_range::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__macroRootDict_236_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&CSearch_range::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__macroRootDict_236_0_38, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&CSearch_range::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__macroRootDict_236_0_39, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&CSearch_range::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__macroRootDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__macroRootDict_236_0_43, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__macroRootDict_236_0_44, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&CSearch_range::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__macroRootDict_236_0_45, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&CSearch_range::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__macroRootDict_236_0_46, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&CSearch_range::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__macroRootDict_236_0_47, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&CSearch_range::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("CSearch_range", 1285, G__macroRootDict_236_0_48, (int) ('i'), G__get_linked_tagnum(&G__macroRootDictLN_CSearch_range), -1, 0, 1, 1, 1, 0, "u 'CSearch_range' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~CSearch_range", 1411, G__macroRootDict_236_0_49, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__macroRootDict_236_0_50, (int) ('u'), G__get_linked_tagnum(&G__macroRootDictLN_CSearch_range), -1, 1, 1, 1, 1, 0, "u 'CSearch_range' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFileList(void) {
   /* FileList */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__macroRootDictLN_FileList));
   G__memfunc_setup("FileList",796,G__macroRootDict_245_0_1, 105, G__get_linked_tagnum(&G__macroRootDictLN_FileList), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FileList",796,G__macroRootDict_245_0_2, 105, G__get_linked_tagnum(&G__macroRootDictLN_FileList), -1, 0, 2, 1, 1, 0, 
"C - - 10 - filelist i - - 0 '1000' NFile", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__macroRootDict_245_0_3, 85, G__get_linked_tagnum(&G__macroRootDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FileList::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__macroRootDict_245_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FileList::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__macroRootDict_245_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FileList::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__macroRootDict_245_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FileList::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__macroRootDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__macroRootDict_245_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__macroRootDict_245_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FileList::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__macroRootDict_245_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FileList::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__macroRootDict_245_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FileList::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__macroRootDict_245_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FileList::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FileList", 922, G__macroRootDict_245_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncefficiency(void) {
   /* efficiency */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__macroRootDictLN_efficiency));
   G__memfunc_setup("efficiency",1045,G__macroRootDict_246_0_1, 105, G__get_linked_tagnum(&G__macroRootDictLN_efficiency), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("efficiency",1045,G__macroRootDict_246_0_2, 105, G__get_linked_tagnum(&G__macroRootDictLN_efficiency), -1, 0, 7, 1, 1, 0, 
"U 'FileList' - 0 - filelist_in C - - 10 - name "
"C - - 10 - title i - - 0 - num "
"d - - 0 - min d - - 0 - max "
"d - - 0 - width", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEfError",993,G__macroRootDict_246_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillloop",865,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"i - - 0 - i d - - 0 - iter", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__macroRootDict_246_0_5, 85, G__get_linked_tagnum(&G__macroRootDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&efficiency::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__macroRootDict_246_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&efficiency::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__macroRootDict_246_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&efficiency::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__macroRootDict_246_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&efficiency::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__macroRootDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__macroRootDict_246_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__macroRootDict_246_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&efficiency::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__macroRootDict_246_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&efficiency::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__macroRootDict_246_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&efficiency::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__macroRootDict_246_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&efficiency::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~efficiency", 1171, G__macroRootDict_246_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTH1DByTree(void) {
   /* TH1DByTree */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__macroRootDictLN_TH1DByTree));
   G__memfunc_setup("TH1DByTree",860,G__macroRootDict_324_0_1, 105, G__get_linked_tagnum(&G__macroRootDictLN_TH1DByTree), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TH1DByTree",860,G__macroRootDict_324_0_2, 105, G__get_linked_tagnum(&G__macroRootDictLN_TH1DByTree), -1, 0, 9, 1, 1, 0, 
"U 'TTree' - 0 - tree C - - 10 - paraname "
"C - - 10 - name C - - 10 - title "
"i - - 0 - num d - - 0 - min "
"d - - 0 - max d - - 0 - width "
"i 'TH1DByTree::Axis' - 0 'x' axis", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TH1DByTree",860,G__macroRootDict_324_0_3, 105, G__get_linked_tagnum(&G__macroRootDictLN_TH1DByTree), -1, 0, 9, 1, 1, 0, 
"U 'TTree' - 0 - tree U 'goodness_data' - 0 - data "
"C - - 10 - name C - - 10 - title "
"i - - 0 - num d - - 0 - min "
"d - - 0 - max d - - 0 - width "
"i 'TH1DByTree::Axis' - 0 - axis", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FitByGaussian",1305,G__macroRootDict_324_0_4, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - - 0 - secondpara d - - 0 '100.' firstpara "
"d - - 0 '100.' thirdpara", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DrawGaussian",1225,G__macroRootDict_324_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetGaussianBias",1498,G__macroRootDict_324_0_6, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetGaussianError",1637,G__macroRootDict_324_0_7, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetGaussianBiasError",2020,G__macroRootDict_324_0_8, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetGaussianErrorError",2159,G__macroRootDict_324_0_9, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__macroRootDict_324_0_10, 85, G__get_linked_tagnum(&G__macroRootDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TH1DByTree::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__macroRootDict_324_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TH1DByTree::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__macroRootDict_324_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TH1DByTree::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__macroRootDict_324_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TH1DByTree::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__macroRootDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__macroRootDict_324_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__macroRootDict_324_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TH1DByTree::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__macroRootDict_324_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TH1DByTree::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__macroRootDict_324_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TH1DByTree::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__macroRootDict_324_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TH1DByTree::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TH1DByTree", 860, G__macroRootDict_324_0_22, (int) ('i'), G__get_linked_tagnum(&G__macroRootDictLN_TH1DByTree), -1, 0, 1, 1, 1, 0, "u 'TH1DByTree' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TH1DByTree", 986, G__macroRootDict_324_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHistError(void) {
   /* HistError */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__macroRootDictLN_HistError));
   G__memfunc_setup("HistError",930,G__macroRootDict_326_0_1, 105, G__get_linked_tagnum(&G__macroRootDictLN_HistError), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HistError",930,G__macroRootDict_326_0_2, 105, G__get_linked_tagnum(&G__macroRootDictLN_HistError), -1, 0, 12, 1, 1, 0, 
"U 'FileList' - 0 - list C - - 10 - paraname_in "
"C - - 10 - name C - - 10 - title "
"i - - 0 - num d - - 0 - min "
"d - - 0 - max d - - 0 - width "
"i - - 0 - numorig_in d - - 0 - minorig_in "
"d - - 0 - maxorig_in d - - 0 - widthorig_in", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillloop",865,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"i - - 0 - i d - - 0 - iter", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__macroRootDict_326_0_4, 85, G__get_linked_tagnum(&G__macroRootDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HistError::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__macroRootDict_326_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HistError::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__macroRootDict_326_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HistError::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__macroRootDict_326_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HistError::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__macroRootDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__macroRootDict_326_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__macroRootDict_326_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HistError::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__macroRootDict_326_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HistError::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__macroRootDict_326_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HistError::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__macroRootDict_326_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HistError::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HistError", 1056, G__macroRootDict_326_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHistBias(void) {
   /* HistBias */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__macroRootDictLN_HistBias));
   G__memfunc_setup("HistBias",791,G__macroRootDict_327_0_1, 105, G__get_linked_tagnum(&G__macroRootDictLN_HistBias), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HistBias",791,G__macroRootDict_327_0_2, 105, G__get_linked_tagnum(&G__macroRootDictLN_HistBias), -1, 0, 12, 1, 1, 0, 
"U 'FileList' - 0 - list C - - 10 - paraname_in "
"C - - 10 - name C - - 10 - title "
"i - - 0 - num d - - 0 - min "
"d - - 0 - max d - - 0 - width "
"i - - 0 - numorig_in d - - 0 - minorig_in "
"d - - 0 - maxorig_in d - - 0 - widthorig_in", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillloop",865,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"i - - 0 - i d - - 0 - iter", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__macroRootDict_327_0_4, 85, G__get_linked_tagnum(&G__macroRootDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HistBias::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__macroRootDict_327_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HistBias::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__macroRootDict_327_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HistBias::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__macroRootDict_327_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HistBias::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__macroRootDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__macroRootDict_327_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__macroRootDict_327_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HistBias::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__macroRootDict_327_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HistBias::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__macroRootDict_327_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HistBias::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__macroRootDict_327_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HistBias::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HistBias", 917, G__macroRootDict_327_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMultiRunAnalizeManager(void) {
   /* MultiRunAnalizeManager */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__macroRootDictLN_MultiRunAnalizeManager));
   G__memfunc_setup("MultiRunAnalizeManager",2239,G__macroRootDict_328_0_1, 105, G__get_linked_tagnum(&G__macroRootDictLN_MultiRunAnalizeManager), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MultiRunAnalizeManager",2239,G__macroRootDict_328_0_2, 105, G__get_linked_tagnum(&G__macroRootDictLN_MultiRunAnalizeManager), -1, 0, 3, 1, 1, 0, 
"U 'FileList' - 0 - datafilelist U 'FileList' - 0 - goodnessfilelist "
"i - - 0 - NRun_in", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MultiRunAnalizeManager",2239,G__macroRootDict_328_0_3, 105, G__get_linked_tagnum(&G__macroRootDictLN_MultiRunAnalizeManager), -1, 0, 2, 1, 1, 0, 
"U 'FileList' - 0 - datafilelist i - - 0 - NRun_in", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetGoodnessfile",1550,G__macroRootDict_328_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "U 'FileList' - 0 - goodnessfilelist", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNRun",675,G__macroRootDict_328_0_5, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Fillefficiency",1436,G__macroRootDict_328_0_6, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - - 0 - xmin d - - 0 - xmax "
"d - - 0 - xwidth", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Getefficiency",1333,G__macroRootDict_328_0_7, 85, G__get_linked_tagnum(&G__macroRootDictLN_TH1D), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Fillerrorandbiasgaussian",2526,G__macroRootDict_328_0_8, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - - 0 - xmin d - - 0 - xmax "
"d - - 0 - xwidth", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Getxerror",962,G__macroRootDict_328_0_9, 85, G__get_linked_tagnum(&G__macroRootDictLN_TH1D), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Getyerror",963,G__macroRootDict_328_0_10, 85, G__get_linked_tagnum(&G__macroRootDictLN_TH1D), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Getzerror",964,G__macroRootDict_328_0_11, 85, G__get_linked_tagnum(&G__macroRootDictLN_TH1D), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Getxbias",823,G__macroRootDict_328_0_12, 85, G__get_linked_tagnum(&G__macroRootDictLN_TH1D), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Getybias",824,G__macroRootDict_328_0_13, 85, G__get_linked_tagnum(&G__macroRootDictLN_TH1D), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Getzbias",825,G__macroRootDict_328_0_14, 85, G__get_linked_tagnum(&G__macroRootDictLN_TH1D), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__macroRootDict_328_0_15, 85, G__get_linked_tagnum(&G__macroRootDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MultiRunAnalizeManager::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__macroRootDict_328_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MultiRunAnalizeManager::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__macroRootDict_328_0_17, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MultiRunAnalizeManager::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__macroRootDict_328_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MultiRunAnalizeManager::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__macroRootDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__macroRootDict_328_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__macroRootDict_328_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MultiRunAnalizeManager::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__macroRootDict_328_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MultiRunAnalizeManager::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__macroRootDict_328_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MultiRunAnalizeManager::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__macroRootDict_328_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MultiRunAnalizeManager::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MultiRunAnalizeManager", 2365, G__macroRootDict_328_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncOneRunAnalizeManager(void) {
   /* OneRunAnalizeManager */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__macroRootDictLN_OneRunAnalizeManager));
   G__memfunc_setup("OneRunAnalizeManager",2006,G__macroRootDict_384_0_1, 105, G__get_linked_tagnum(&G__macroRootDictLN_OneRunAnalizeManager), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("OneRunAnalizeManager",2006,G__macroRootDict_384_0_2, 105, G__get_linked_tagnum(&G__macroRootDictLN_OneRunAnalizeManager), -1, 0, 1, 1, 1, 0, "U 'TFile' - 0 - datafile", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("OneRunAnalizeManager",2006,G__macroRootDict_384_0_3, 105, G__get_linked_tagnum(&G__macroRootDictLN_OneRunAnalizeManager), -1, 0, 3, 1, 1, 0, 
"U 'TFile' - 0 - datafile U 'TFile' - 0 - goodnessfile "
"i - - 0 '0' number", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetGoodnessfile",1550,G__macroRootDict_384_0_4, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'TFile' - 0 - goodnessfile i - - 0 '0' number", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetXHist",784,G__macroRootDict_384_0_5, 85, G__get_linked_tagnum(&G__macroRootDictLN_TH1D), -1, 0, 2, 1, 1, 0, 
"C - - 10 '\"\"' name C - - 10 '\"\"' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetYHist",785,G__macroRootDict_384_0_6, 85, G__get_linked_tagnum(&G__macroRootDictLN_TH1D), -1, 0, 2, 1, 1, 0, 
"C - - 10 '\"\"' name C - - 10 '\"\"' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZHist",786,G__macroRootDict_384_0_7, 85, G__get_linked_tagnum(&G__macroRootDictLN_TH1D), -1, 0, 2, 1, 1, 0, 
"C - - 10 '\"\"' name C - - 10 '\"\"' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTHist",780,G__macroRootDict_384_0_8, 85, G__get_linked_tagnum(&G__macroRootDictLN_TH1D), -1, 0, 2, 1, 1, 0, 
"C - - 10 '\"\"' name C - - 10 '\"\"' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FitByGaussianAll",1586,G__macroRootDict_384_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Getfgaussianx",1369,G__macroRootDict_384_0_10, 85, G__get_linked_tagnum(&G__macroRootDictLN_TF1), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Getfgaussiany",1370,G__macroRootDict_384_0_11, 85, G__get_linked_tagnum(&G__macroRootDictLN_TF1), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Getfgaussianz",1371,G__macroRootDict_384_0_12, 85, G__get_linked_tagnum(&G__macroRootDictLN_TF1), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTH2D",562,G__macroRootDict_384_0_13, 85, G__get_linked_tagnum(&G__macroRootDictLN_TH2D), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillTH2D",665,G__macroRootDict_384_0_14, 121, -1, -1, 0, 11, 1, 1, 0, 
"C - - 10 - name C - - 10 - title "
"i - - 0 - n i - - 0 - xnum "
"d - - 0 - xmin d - - 0 - xmax "
"i - - 0 - ynum d - - 0 - ymin "
"d - - 0 - ymax C - - 10 - xvar "
"C - - 10 - yvar", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEfficiency",1301,G__macroRootDict_384_0_15, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetWCSimRootEvent",1673,G__macroRootDict_384_0_16, 85, G__get_linked_tagnum(&G__macroRootDictLN_WCSimRootEvent), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVariable",1094,(G__InterfaceMethod) NULL, 100, -1, -1, 0, 1, 1, 4, 0, "C - - 10 - valname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__macroRootDict_384_0_18, 85, G__get_linked_tagnum(&G__macroRootDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&OneRunAnalizeManager::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__macroRootDict_384_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&OneRunAnalizeManager::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__macroRootDict_384_0_20, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&OneRunAnalizeManager::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__macroRootDict_384_0_21, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&OneRunAnalizeManager::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__macroRootDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__macroRootDict_384_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__macroRootDict_384_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&OneRunAnalizeManager::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__macroRootDict_384_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&OneRunAnalizeManager::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__macroRootDict_384_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&OneRunAnalizeManager::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__macroRootDict_384_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&OneRunAnalizeManager::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("OneRunAnalizeManager", 2006, G__macroRootDict_384_0_30, (int) ('i'), G__get_linked_tagnum(&G__macroRootDictLN_OneRunAnalizeManager), -1, 0, 1, 1, 1, 0, "u 'OneRunAnalizeManager' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~OneRunAnalizeManager", 2132, G__macroRootDict_384_0_31, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__macroRootDict_384_0_32, (int) ('u'), G__get_linked_tagnum(&G__macroRootDictLN_OneRunAnalizeManager), -1, 1, 1, 1, 1, 0, "u 'OneRunAnalizeManager' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAngleRange(void) {
   /* AngleRange */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__macroRootDictLN_AngleRange));
   G__memfunc_setup("AngleRange",980,G__macroRootDict_385_0_1, 105, G__get_linked_tagnum(&G__macroRootDictLN_AngleRange), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Setrange",825,G__macroRootDict_385_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "u 'AngleRange' - 0 - range", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCosthetamin",1439,G__macroRootDict_385_0_3, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCosthetamin",1451,G__macroRootDict_385_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - costheta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCosthetawidth",1659,G__macroRootDict_385_0_5, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCosthetawidth",1671,G__macroRootDict_385_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - width", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCosthetaNum",1419,G__macroRootDict_385_0_7, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCosthetaNum",1431,G__macroRootDict_385_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - num", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPhimin",901,G__macroRootDict_385_0_9, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPhimin",913,G__macroRootDict_385_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - min", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPhiwidth",1121,G__macroRootDict_385_0_11, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPhiwidth",1133,G__macroRootDict_385_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - width", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPhiNum",881,G__macroRootDict_385_0_13, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPhiNum",893,G__macroRootDict_385_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - num", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__macroRootDict_385_0_15, 85, G__get_linked_tagnum(&G__macroRootDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AngleRange::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__macroRootDict_385_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AngleRange::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__macroRootDict_385_0_17, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AngleRange::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__macroRootDict_385_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AngleRange::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__macroRootDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__macroRootDict_385_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__macroRootDict_385_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AngleRange::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__macroRootDict_385_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AngleRange::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__macroRootDict_385_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AngleRange::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__macroRootDict_385_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AngleRange::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("AngleRange", 980, G__macroRootDict_385_0_27, (int) ('i'), G__get_linked_tagnum(&G__macroRootDictLN_AngleRange), -1, 0, 1, 1, 1, 0, "u 'AngleRange' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~AngleRange", 1106, G__macroRootDict_385_0_28, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__macroRootDict_385_0_29, (int) ('u'), G__get_linked_tagnum(&G__macroRootDictLN_AngleRange), -1, 1, 1, 1, 1, 0, "u 'AngleRange' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncmacroRootDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {
}

static void G__cpp_setup_global4() {
}

static void G__cpp_setup_global5() {
}

static void G__cpp_setup_global6() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalmacroRootDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
  G__cpp_setup_global4();
  G__cpp_setup_global5();
  G__cpp_setup_global6();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcmacroRootDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__macroRootDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__macroRootDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__macroRootDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__macroRootDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__macroRootDictLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__macroRootDictLN_TCollection = { "TCollection" , 99 , -1 };
G__linked_taginfo G__macroRootDictLN_string = { "string" , 99 , -1 };
G__linked_taginfo G__macroRootDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__macroRootDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__macroRootDictLN_TObjArray = { "TObjArray" , 99 , -1 };
G__linked_taginfo G__macroRootDictLN_TClonesArray = { "TClonesArray" , 99 , -1 };
G__linked_taginfo G__macroRootDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__macroRootDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__macroRootDictLN_TArray = { "TArray" , 99 , -1 };
G__linked_taginfo G__macroRootDictLN_TArrayD = { "TArrayD" , 99 , -1 };
G__linked_taginfo G__macroRootDictLN_TAttLine = { "TAttLine" , 99 , -1 };
G__linked_taginfo G__macroRootDictLN_TAttFill = { "TAttFill" , 99 , -1 };
G__linked_taginfo G__macroRootDictLN_TAttMarker = { "TAttMarker" , 99 , -1 };
G__linked_taginfo G__macroRootDictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__macroRootDictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__macroRootDictLN_TF1 = { "TF1" , 99 , -1 };
G__linked_taginfo G__macroRootDictLN_TH1D = { "TH1D" , 99 , -1 };
G__linked_taginfo G__macroRootDictLN_TH1 = { "TH1" , 99 , -1 };
G__linked_taginfo G__macroRootDictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__macroRootDictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__macroRootDictLN_TH2D = { "TH2D" , 99 , -1 };
G__linked_taginfo G__macroRootDictLN_TArc = { "TArc" , 99 , -1 };
G__linked_taginfo G__macroRootDictLN_TPave = { "TPave" , 99 , -1 };
G__linked_taginfo G__macroRootDictLN_Eventdisplay = { "Eventdisplay" , 99 , -1 };
G__linked_taginfo G__macroRootDictLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G__macroRootDictLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G__macroRootDictLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G__macroRootDictLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G__macroRootDictLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G__macroRootDictLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__macroRootDictLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G__macroRootDictLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G__macroRootDictLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G__macroRootDictLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G__macroRootDictLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__macroRootDictLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G__macroRootDictLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G__macroRootDictLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G__macroRootDictLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G__macroRootDictLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G__macroRootDictLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G__macroRootDictLN_TVector3 = { "TVector3" , 99 , -1 };
G__linked_taginfo G__macroRootDictLN_TLorentzVector = { "TLorentzVector" , 99 , -1 };
G__linked_taginfo G__macroRootDictLN_goodness_data = { "goodness_data" , 99 , -1 };
G__linked_taginfo G__macroRootDictLN_l_dir_data = { "l_dir_data" , 99 , -1 };
G__linked_taginfo G__macroRootDictLN_AnalizedData = { "AnalizedData" , 99 , -1 };
G__linked_taginfo G__macroRootDictLN_C4Number = { "C4Number" , 99 , -1 };
G__linked_taginfo G__macroRootDictLN_CSearch_range = { "CSearch_range" , 99 , -1 };
G__linked_taginfo G__macroRootDictLN_TSeqCollection = { "TSeqCollection" , 99 , -1 };
G__linked_taginfo G__macroRootDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__macroRootDictLN_FileList = { "FileList" , 99 , -1 };
G__linked_taginfo G__macroRootDictLN_efficiency = { "efficiency" , 99 , -1 };
G__linked_taginfo G__macroRootDictLN_TTree = { "TTree" , 99 , -1 };
G__linked_taginfo G__macroRootDictLN_TFile = { "TFile" , 99 , -1 };
G__linked_taginfo G__macroRootDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR = { "map<string,TObjArray*,less<string>,allocator<pair<const string,TObjArray*> > >" , 99 , -1 };
G__linked_taginfo G__macroRootDictLN_TH1DByTree = { "TH1DByTree" , 99 , -1 };
G__linked_taginfo G__macroRootDictLN_TH1DByTreecLcLAxis = { "TH1DByTree::Axis" , 101 , -1 };
G__linked_taginfo G__macroRootDictLN_HistError = { "HistError" , 99 , -1 };
G__linked_taginfo G__macroRootDictLN_HistBias = { "HistBias" , 99 , -1 };
G__linked_taginfo G__macroRootDictLN_MultiRunAnalizeManager = { "MultiRunAnalizeManager" , 99 , -1 };
G__linked_taginfo G__macroRootDictLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__macroRootDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__macroRootDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR = { "vector<float,allocator<float> >" , 99 , -1 };
G__linked_taginfo G__macroRootDictLN_reverse_iteratorlEvectorlEfloatcOallocatorlEfloatgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<float,allocator<float> >::iterator>" , 99 , -1 };
G__linked_taginfo G__macroRootDictLN_WCSimRootEvent = { "WCSimRootEvent" , 99 , -1 };
G__linked_taginfo G__macroRootDictLN_WCSimRootGeom = { "WCSimRootGeom" , 99 , -1 };
G__linked_taginfo G__macroRootDictLN_OneRunAnalizeManager = { "OneRunAnalizeManager" , 99 , -1 };
G__linked_taginfo G__macroRootDictLN_AngleRange = { "AngleRange" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtablemacroRootDict() {
  G__macroRootDictLN_TClass.tagnum = -1 ;
  G__macroRootDictLN_TBuffer.tagnum = -1 ;
  G__macroRootDictLN_TMemberInspector.tagnum = -1 ;
  G__macroRootDictLN_TObject.tagnum = -1 ;
  G__macroRootDictLN_TNamed.tagnum = -1 ;
  G__macroRootDictLN_TCollection.tagnum = -1 ;
  G__macroRootDictLN_string.tagnum = -1 ;
  G__macroRootDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__macroRootDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__macroRootDictLN_TObjArray.tagnum = -1 ;
  G__macroRootDictLN_TClonesArray.tagnum = -1 ;
  G__macroRootDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__macroRootDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__macroRootDictLN_TArray.tagnum = -1 ;
  G__macroRootDictLN_TArrayD.tagnum = -1 ;
  G__macroRootDictLN_TAttLine.tagnum = -1 ;
  G__macroRootDictLN_TAttFill.tagnum = -1 ;
  G__macroRootDictLN_TAttMarker.tagnum = -1 ;
  G__macroRootDictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__macroRootDictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__macroRootDictLN_TF1.tagnum = -1 ;
  G__macroRootDictLN_TH1D.tagnum = -1 ;
  G__macroRootDictLN_TH1.tagnum = -1 ;
  G__macroRootDictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__macroRootDictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__macroRootDictLN_TH2D.tagnum = -1 ;
  G__macroRootDictLN_TArc.tagnum = -1 ;
  G__macroRootDictLN_TPave.tagnum = -1 ;
  G__macroRootDictLN_Eventdisplay.tagnum = -1 ;
  G__macroRootDictLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G__macroRootDictLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G__macroRootDictLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G__macroRootDictLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G__macroRootDictLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G__macroRootDictLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G__macroRootDictLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G__macroRootDictLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G__macroRootDictLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G__macroRootDictLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G__macroRootDictLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G__macroRootDictLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G__macroRootDictLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G__macroRootDictLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G__macroRootDictLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G__macroRootDictLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G__macroRootDictLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G__macroRootDictLN_TVector3.tagnum = -1 ;
  G__macroRootDictLN_TLorentzVector.tagnum = -1 ;
  G__macroRootDictLN_goodness_data.tagnum = -1 ;
  G__macroRootDictLN_l_dir_data.tagnum = -1 ;
  G__macroRootDictLN_AnalizedData.tagnum = -1 ;
  G__macroRootDictLN_C4Number.tagnum = -1 ;
  G__macroRootDictLN_CSearch_range.tagnum = -1 ;
  G__macroRootDictLN_TSeqCollection.tagnum = -1 ;
  G__macroRootDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__macroRootDictLN_FileList.tagnum = -1 ;
  G__macroRootDictLN_efficiency.tagnum = -1 ;
  G__macroRootDictLN_TTree.tagnum = -1 ;
  G__macroRootDictLN_TFile.tagnum = -1 ;
  G__macroRootDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR.tagnum = -1 ;
  G__macroRootDictLN_TH1DByTree.tagnum = -1 ;
  G__macroRootDictLN_TH1DByTreecLcLAxis.tagnum = -1 ;
  G__macroRootDictLN_HistError.tagnum = -1 ;
  G__macroRootDictLN_HistBias.tagnum = -1 ;
  G__macroRootDictLN_MultiRunAnalizeManager.tagnum = -1 ;
  G__macroRootDictLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__macroRootDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__macroRootDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR.tagnum = -1 ;
  G__macroRootDictLN_reverse_iteratorlEvectorlEfloatcOallocatorlEfloatgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__macroRootDictLN_WCSimRootEvent.tagnum = -1 ;
  G__macroRootDictLN_WCSimRootGeom.tagnum = -1 ;
  G__macroRootDictLN_OneRunAnalizeManager.tagnum = -1 ;
  G__macroRootDictLN_AngleRange.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtablemacroRootDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__macroRootDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__macroRootDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__macroRootDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__macroRootDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__macroRootDictLN_TNamed);
   G__get_linked_tagnum_fwd(&G__macroRootDictLN_TCollection);
   G__get_linked_tagnum_fwd(&G__macroRootDictLN_string);
   G__get_linked_tagnum_fwd(&G__macroRootDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__macroRootDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__macroRootDictLN_TObjArray);
   G__get_linked_tagnum_fwd(&G__macroRootDictLN_TClonesArray);
   G__get_linked_tagnum_fwd(&G__macroRootDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__macroRootDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__macroRootDictLN_TArray);
   G__get_linked_tagnum_fwd(&G__macroRootDictLN_TArrayD);
   G__get_linked_tagnum_fwd(&G__macroRootDictLN_TAttLine);
   G__get_linked_tagnum_fwd(&G__macroRootDictLN_TAttFill);
   G__get_linked_tagnum_fwd(&G__macroRootDictLN_TAttMarker);
   G__get_linked_tagnum_fwd(&G__macroRootDictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__macroRootDictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__macroRootDictLN_TF1);
   G__get_linked_tagnum_fwd(&G__macroRootDictLN_TH1D);
   G__get_linked_tagnum_fwd(&G__macroRootDictLN_TH1);
   G__get_linked_tagnum_fwd(&G__macroRootDictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__macroRootDictLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__macroRootDictLN_TH2D);
   G__get_linked_tagnum_fwd(&G__macroRootDictLN_TArc);
   G__get_linked_tagnum_fwd(&G__macroRootDictLN_TPave);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__macroRootDictLN_Eventdisplay),sizeof(Eventdisplay),-1,324864,(char*)NULL,G__setup_memvarEventdisplay,G__setup_memfuncEventdisplay);
   G__get_linked_tagnum_fwd(&G__macroRootDictLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__macroRootDictLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__macroRootDictLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__macroRootDictLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__macroRootDictLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__macroRootDictLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__macroRootDictLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__macroRootDictLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__macroRootDictLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__macroRootDictLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__macroRootDictLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__macroRootDictLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G__macroRootDictLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__macroRootDictLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G__macroRootDictLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G__macroRootDictLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__macroRootDictLN_TMatrixTSparseDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__macroRootDictLN_TVector3);
   G__get_linked_tagnum_fwd(&G__macroRootDictLN_TLorentzVector);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__macroRootDictLN_goodness_data),sizeof(goodness_data),-1,324864,(char*)NULL,G__setup_memvargoodness_data,G__setup_memfuncgoodness_data);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__macroRootDictLN_l_dir_data),sizeof(l_dir_data),-1,324864,(char*)NULL,G__setup_memvarl_dir_data,G__setup_memfuncl_dir_data);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__macroRootDictLN_AnalizedData),sizeof(AnalizedData),-1,324864,(char*)NULL,G__setup_memvarAnalizedData,G__setup_memfuncAnalizedData);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__macroRootDictLN_C4Number),sizeof(C4Number),-1,324864,(char*)NULL,G__setup_memvarC4Number,G__setup_memfuncC4Number);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__macroRootDictLN_CSearch_range),sizeof(CSearch_range),-1,324864,(char*)NULL,G__setup_memvarCSearch_range,G__setup_memfuncCSearch_range);
   G__get_linked_tagnum_fwd(&G__macroRootDictLN_TSeqCollection);
   G__get_linked_tagnum_fwd(&G__macroRootDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__macroRootDictLN_FileList),sizeof(FileList),-1,324864,(char*)NULL,G__setup_memvarFileList,G__setup_memfuncFileList);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__macroRootDictLN_efficiency),sizeof(efficiency),-1,324864,(char*)NULL,G__setup_memvarefficiency,G__setup_memfuncefficiency);
   G__get_linked_tagnum_fwd(&G__macroRootDictLN_TTree);
   G__get_linked_tagnum_fwd(&G__macroRootDictLN_TFile);
   G__get_linked_tagnum_fwd(&G__macroRootDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__macroRootDictLN_TH1DByTree),sizeof(TH1DByTree),-1,324864,(char*)NULL,G__setup_memvarTH1DByTree,G__setup_memfuncTH1DByTree);
   G__get_linked_tagnum_fwd(&G__macroRootDictLN_TH1DByTreecLcLAxis);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__macroRootDictLN_HistError),sizeof(HistError),-1,324864,(char*)NULL,G__setup_memvarHistError,G__setup_memfuncHistError);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__macroRootDictLN_HistBias),sizeof(HistBias),-1,324864,(char*)NULL,G__setup_memvarHistBias,G__setup_memfuncHistBias);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__macroRootDictLN_MultiRunAnalizeManager),sizeof(MultiRunAnalizeManager),-1,324864,(char*)NULL,G__setup_memvarMultiRunAnalizeManager,G__setup_memfuncMultiRunAnalizeManager);
   G__get_linked_tagnum_fwd(&G__macroRootDictLN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__macroRootDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__macroRootDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR);
   G__get_linked_tagnum_fwd(&G__macroRootDictLN_reverse_iteratorlEvectorlEfloatcOallocatorlEfloatgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__macroRootDictLN_WCSimRootEvent);
   G__get_linked_tagnum_fwd(&G__macroRootDictLN_WCSimRootGeom);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__macroRootDictLN_OneRunAnalizeManager),sizeof(OneRunAnalizeManager),-1,324864,(char*)NULL,G__setup_memvarOneRunAnalizeManager,G__setup_memfuncOneRunAnalizeManager);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__macroRootDictLN_AngleRange),sizeof(AngleRange),-1,292096,(char*)NULL,G__setup_memvarAngleRange,G__setup_memfuncAngleRange);
}
extern "C" void G__cpp_setupmacroRootDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupmacroRootDict()");
  G__set_cpp_environmentmacroRootDict();
  G__cpp_setup_tagtablemacroRootDict();

  G__cpp_setup_inheritancemacroRootDict();

  G__cpp_setup_typetablemacroRootDict();

  G__cpp_setup_memvarmacroRootDict();

  G__cpp_setup_memfuncmacroRootDict();
  G__cpp_setup_globalmacroRootDict();
  G__cpp_setup_funcmacroRootDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncmacroRootDict();
  return;
}
class G__cpp_setup_initmacroRootDict {
  public:
    G__cpp_setup_initmacroRootDict() { G__add_setup_func("macroRootDict",(G__incsetup)(&G__cpp_setupmacroRootDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initmacroRootDict() { G__remove_setup_func("macroRootDict"); }
};
G__cpp_setup_initmacroRootDict G__cpp_setup_initializermacroRootDict;

